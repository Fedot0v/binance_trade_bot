from strategies.novichok_strategy import NovichokStrategy
from strategies.compensation_strategy import CompensationStrategy
from strategies.base_strategy import BaseStrategy
from services.strategy_parameters import StrategyParameters
from strategies.novichok_adapter import NovichokAdapter
from strategies.compensation_adapter import CompensationAdapter


STRATEGY_REGISTRY = {
    "novichok": NovichokStrategy,
    "compensation": CompensationStrategy
}


def get_strategy_class_by_name(
    name: str,
    params: StrategyParameters
) -> BaseStrategy:
    strategy_cls = STRATEGY_REGISTRY.get(name.lower())
    if not strategy_cls:
        raise ValueError(f"Strategy '{name}' not found")
    return strategy_cls(params)


def make_strategy(strategy_name: str, template) -> object:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –µ–¥–∏–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (required_symbols/decide).
    –î–ª—è novichok ‚Äî –≤–µ—Ä–Ω—ë—Ç NovichokAdapter(NovichokStrategy(...)).
    –î–ª—è compensation ‚Äî –≤–µ—Ä–Ω—ë—Ç CompensationAdapter(CompensationStrategy(...)).
    """
    name = (strategy_name or "novichok").lower()
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ template
    if hasattr(template, 'parameters') and template.parameters:
        parameters = template.parameters

        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if isinstance(parameters, dict):
            params = parameters
        # –ï—Å–ª–∏ —ç—Ç–æ SimpleNamespace –∏–ª–∏ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç —Å __dict__
        elif hasattr(parameters, '__dict__'):
            params = parameters.__dict__
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (JSON) - –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        elif isinstance(parameters, str):
            try:
                import json
                params = json.loads(parameters)
            except (json.JSONDecodeError, TypeError):
                params = {}
        # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç (–Ω–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞)
        elif hasattr(parameters, '__iter__') and not isinstance(parameters, str):
            try:
                params = dict(parameters)
            except (ValueError, TypeError):
                params = {}
        else:
            params = {}
    else:
        params = {}
    
    if name == "novichok":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ params
        print(f"üß† –°–æ–∑–¥–∞–Ω–∏–µ NovichokStrategy —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        legacy = NovichokStrategy(StrategyParameters(raw=params))
        return NovichokAdapter(legacy)
    elif name == "compensation":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ params
        print(f"üß† –°–æ–∑–¥–∞–Ω–∏–µ CompensationStrategy —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        legacy = CompensationStrategy(StrategyParameters(raw=params))
        adapter = CompensationAdapter(legacy, None)  # deal_service = None –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
        return adapter
    else:
        # –û—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        raise ValueError(f"Strategy '{name}' not found")