from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta

import pandas as pd

from strategies.base_strategy import BaseStrategy
from services.strategy_parameters import StrategyParameters
from strategies.contracts import Decision, OrderIntent, MarketData, OpenState, Strategy
from strategies.compensation_strategy import CompensationStrategy
from services.deal_service import DealService
# from strategies.market_data import MarketData


def _sym_str(x) -> str:
    return x.value if hasattr(x, "value") else str(x)


class CompensationAdapter(Strategy):
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∏ —Ä–µ–∞–∫—Ü–∏—è"
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ö–æ–¥–æ–º –≤ BTC –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ ETH
    """

    id = "compensation-adapter"

    def __init__(self, strategy: CompensationStrategy, template: Any, deal_service: DealService):
        super().__init__(strategy_id="compensation", symbols=strategy.required_symbols(template=template))
        if not isinstance(strategy, CompensationStrategy):
            # print(f"‚ùå ERROR: Wrong strategy type! Expected CompensationStrategy, got {type(self.strategy)}")
            raise ValueError("CompensationAdapter requires CompensationStrategy")
        self.strategy: CompensationStrategy = strategy
        self.deal_service = deal_service

    def required_symbols(self, template) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: BTC –∏ ETH –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return ["BTCUSDT", "ETHUSDT"]

    async def decide(
        self,
        md: Dict[str, pd.DataFrame],
        template,
        open_state: Dict[str, Any] | None = None
    ) -> Decision:
        # print(f"üîç DEBUG: CompensationAdapter.decide() called - VERSION FIXED")
        # print(f"üîç DEBUG: Available symbols in md: {list(md.keys())}")
        # print(f"üîç DEBUG: Template name: {getattr(template, 'template_name', 'unknown')}")
        # print(f"üîç DEBUG: Strategy type: {type(self.strategy).__name__}")
        # print(f"üîç DEBUG: Strategy name: {getattr(self.strategy, 'name', 'unknown')}")

        verbose = getattr(getattr(self, 'strategy', None), 'verbose', False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ CompensationStrategy
        if not isinstance(self.strategy, CompensationStrategy):
            # print(f"‚ùå ERROR: Wrong strategy type! Expected CompensationStrategy, got {type(self.strategy)}")
            return Decision(intents=[])

        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ BTC –∏ ETH
        """
        btc_symbol = "BTCUSDT"

        btc_df = md.get(btc_symbol)

        if btc_df is None or btc_df.empty:
            print("[COMP] –ü—Ä–æ–ø—É—Å–∫ —Ä–µ—à–µ–Ω–∏—è: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö BTC –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return Decision(intents=[])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
        current_btc_price = btc_df['close'].iloc[-1]
        current_time = btc_df.index[-1] if hasattr(btc_df.index[-1], 'timestamp') else datetime.now()

        # –ü–æ–ª—É—á–∞–µ–º ETH –¥–∞–Ω–Ω—ã–µ (–≤ dual orchestrator –æ–Ω–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã)
        eth_symbol = "ETHUSDT"
        eth_df = md.get(eth_symbol)
        # print(f"‚úÖ CompensationAdapter: –†–∞–±–æ—Ç–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ BTC –∏ ETH")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º open_state –∏–∑ –±—ç–∫—Ç–µ—Å—Ç–∞ –≤–º–µ—Å—Ç–æ deal_service
        btc_position = None
        eth_position = None

        if open_state:
            if btc_symbol in open_state:
                btc_position = open_state[btc_symbol].get('position')
            if eth_symbol in open_state:
                eth_position = open_state[eth_symbol].get('position')

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: ETH –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å BTC
        # –ï—Å–ª–∏ –µ—Å—Ç—å ETH –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ BTC ‚Äî –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º ETH –∏ —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ETH
        if eth_position and not btc_position:
            print("[COMP] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ ETH –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ BTC ‚Äî —Å–æ–∑–¥–∞—ë–º emergency_close –¥–ª—è ETH –∏ —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ETH")
            close_eth_intent = OrderIntent(
                symbol="ETHUSDT",
                side="SELL" if eth_position['side'] == "BUY" else "BUY",
                sizing="close",
                size=0,
                role="emergency_close"
            )
            # –ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ETH, —Ç–∞–∫ –∫–∞–∫ BTC –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            self.strategy.clear_eth_state()
            return Decision(intents=[close_eth_intent])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π –±—ç–∫—Ç–µ—Å—Ç–∞
        self._update_strategy_state_from_positions(btc_position, eth_position, current_time)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ had_btc, –µ—Å–ª–∏ –≤ —ç—Ç–æ–º –ø—Ä–æ–≥–æ–Ω–µ –≤–∏–¥–∏–º —Ä–µ–∞–ª—å–Ω—É—é BTC –ø–æ–∑–∏—Ü–∏—é
        if btc_position:
            try:
                self.strategy.state.had_btc = True
                # –û–±–Ω–æ–≤–∏–º last_btc_deal_id –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∫ —Ç–µ–∫—É—â–µ–º—É BTC
                deal_id = btc_position.get('deal_id', 1)
                self.strategy.state.last_btc_deal_id = deal_id
            except Exception:
                pass
        # –ï—Å–ª–∏ BTC –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –≤ —ç—Ç–æ–º –ø—Ä–æ–≥–æ–Ω–µ BTC —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª—Å—è (had_btc)
        if not btc_position and getattr(self.strategy.state, 'had_btc', False):
            self.strategy.mark_btc_closed(current_time)

        # print(f"üîç DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        # print(f"   btc_deal_id: {self.strategy.state.btc_deal_id}")
        # print(f"   btc_entry_price: {self.strategy.state.btc_entry_price}")
        # print(f"   btc_side: {self.strategy.state.btc_side}")
        # print(f"   eth_deal_id: {self.strategy.state.eth_deal_id}")
        # print(f"   compensation_triggered: {self.strategy.state.compensation_triggered}")

        intents = []

        # –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ BTC (–µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏)
        if not btc_position:
            # print("üîç DEBUG: –ù–µ—Ç BTC –ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥")
            btc_intent = self._generate_btc_entry_intent(btc_df, template)
            if btc_intent:
                print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–Ω BTC entry intent: {btc_intent.symbol} {btc_intent.side} {btc_intent.role}")
                intents.append(btc_intent)
            else:
                # –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã —Ö–æ–ª–¥–∞
                try:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ EMA –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ generate_signal)
                    ema_fast = btc_df['close'].ewm(span=self.strategy.ema_fast).mean().iloc[-1]
                    ema_slow = btc_df['close'].ewm(span=self.strategy.ema_slow).mean().iloc[-1]
                    diff_pct = abs(float(ema_fast) - float(ema_slow)) / float(ema_slow) if float(ema_slow) != 0 else 0.0
                    if verbose:
                        print(f"[HOLD] BTC: —Å–∏–≥–Ω–∞–ª=hold | EMA_fast={float(ema_fast):.2f} EMA_slow={float(ema_slow):.2f} diff={diff_pct*100:.2f}% < threshold={self.strategy.trend_threshold*100:.2f}%")
                except Exception as e:
                    if verbose:
                        print(f"[HOLD] BTC: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏—á–∏–Ω—ã hold: {e}")
                # print("‚ùå CompensationAdapter: BTC entry intent –Ω–µ —Å–æ–∑–¥–∞–Ω")
        else:
            # –ï—Å—Ç—å BTC ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è. –û—Ç–∫—Ä—ã–≤–∞—Ç—å ETH –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –∂–∏–∑–Ω—å BTC-–ø–æ–∑–∏—Ü–∏–∏
            if not eth_position and not self.strategy.state.compensation_triggered:
                if verbose:
                    print("[COMP] –ï—Å—Ç—å BTC –±–µ–∑ ETH, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏")
                eth_int–µ–Ω—Ç = self._generate_eth_compensation_intent(
                    btc_df, current_btc_price, current_time, template, md
                )
                if eth_int–µ–Ω—Ç:
                    # –î–æ–ø. –∑–∞—â–∏—Ç–∞: –∑–∞–ø—Ä–µ—â–∞–µ–º –≤—Ç–æ—Ä–æ–π ETH –¥–ª—è —Ç–æ–≥–æ –∂–µ BTC deal
                    current_deal_id = getattr(self.strategy.state, 'last_btc_deal_id', None)
                    if current_deal_id is not None and getattr(self.strategy.state, 'compensation_done_for_deal_id', None) == current_deal_id:
                        if verbose:
                            print("[COMP] –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ BTC —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π ETH")
                    else:
                        self.strategy.state.compensation_done_for_deal_id = current_deal_id
                    print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–Ω ETH compensation intent: {eth_int–µ–Ω—Ç.symbol} {eth_int–µ–Ω—Ç.side} {eth_int–µ–Ω—Ç.role}")
                    intents.append(eth_int–µ–Ω—Ç)
                else:
                    if verbose:
                        print("[COMP] –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ BTC –∑–∞–∫—Ä—ã—Ç –Ω–µ–¥–∞–≤–Ω–æ, –Ω–æ ETH –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –≤ –ø–æ—Å—Ç-–æ–∫–Ω–µ
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ—Å—Ç-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —ç—Ç–æ–º –ø—Ä–æ–≥–æ–Ω–µ —É–∂–µ –±—ã–ª —Ä–µ–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ –≤ BTC (had_btc=True)
        if (
            not btc_position
            and not eth_position
            and not self.strategy.state.compensation_triggered
            and getattr(self.strategy.state, 'had_btc', False)
            and self.strategy.can_compensate_after_close(current_time)
        ):
            if verbose:
                print("[COMP] –ü–æ—Å—Ç-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: BTC –∑–∞–∫—Ä—ã—Ç –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è ETH")
            eth_intent_post = self._generate_eth_compensation_intent(
                btc_df, current_btc_price, current_time, template, md
            )
            if eth_intent_post:
                # –ü–æ—Å—Ç-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: —Ç–∞–∫–∂–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –¥–ª—è —Ç–æ–≥–æ –∂–µ BTC
                last_deal_id = getattr(self.strategy.state, 'last_btc_deal_id', None)
                if last_deal_id is not None and getattr(self.strategy.state, 'compensation_done_for_deal_id', None) == last_deal_id:
                    if verbose:
                        print("[COMP] –ü–æ—Å—Ç-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ BTC ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                else:
                    self.strategy.state.compensation_done_for_deal_id = last_deal_id
                    print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–Ω ETH compensation intent (post-close): {eth_intent_post.symbol} {eth_intent_post.side} {eth_intent_post.role}")
                    intents.append(eth_intent_post)
            # else:
            #     print("‚ùå CompensationAdapter: ETH compensation intent –Ω–µ —Å–æ–∑–¥–∞–Ω")

        # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
        # print("üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        close_intents = self._generate_close_intents(btc_df, eth_df, btc_position, eth_position)
        if close_intents:
            if verbose:
                print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–Ω—ã close intents: {len(close_intents)}")
            intents.extend(close_intents)
        else:
            if verbose:
                print("[COMP] Close intents –Ω–µ —Å–æ–∑–¥–∞–Ω—ã: —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        # else:
        #     print("‚ùå CompensationAdapter: Close intents –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")

        # print(f"üîç DEBUG: CompensationAdapter –∏—Ç–æ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–æ–≤: {len(intents)}")
        # for i, intent in enumerate(intents):
        #     print(f"   Intent {i+1}: {intent.symbol} {intent.side} {intent.role}")
        return Decision(intents=intents)

    async def _get_open_deals(self, user_id, bot_id) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if self.deal_service and hasattr(self.deal_service, 'get_open_deals') and user_id and bot_id:
                return await self.deal_service.get_open_deals(user_id, bot_id)
            else:
                # –î–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")
            return []

    def _update_strategy_state(self, btc_deal, eth_deal):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫"""
        if btc_deal:
            self.strategy.update_state(
                btc_deal_id=btc_deal.id,
                btc_entry_price=btc_deal.entry_price,
                btc_entry_time=btc_deal.opened_at,
                btc_side=btc_deal.side
            )
        if eth_deal:
            self.strategy.update_state(
                eth_deal_id=eth_deal.id,
                compensation_triggered=True
            )

    def _update_strategy_state_from_positions(self, btc_position, eth_position, current_time):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if btc_position:
            self.strategy.update_state(
                btc_deal_id=btc_position.get('deal_id', 1),
                btc_entry_price=btc_position['entry_price'],
                btc_entry_time=btc_position['entry_time'],
                btc_side=btc_position['side']
            )
        if eth_position:
            self.strategy.update_state(
                eth_deal_id=eth_position.get('deal_id', 2),
                eth_entry_price=eth_position['entry_price'],
                eth_entry_time=eth_position['entry_time'],
                eth_side=eth_position['side'],
                compensation_triggered=True
            )

    def _generate_btc_entry_intent(self, btc_df: pd.DataFrame, template) -> Optional[OrderIntent]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ BTC –ø–æ –ª–æ–≥–∏–∫–µ –Ω–æ–≤–∏—á–∫–∞"""
        signal = self.strategy.generate_signal(btc_df)

        # print(f"üîç DEBUG: _generate_btc_entry_intent - signal: {signal}, df_len: {len(btc_df)}")

        if signal == "hold":
            # print("üîç DEBUG: Signal is 'hold', returning None")
            return None

        side = "BUY" if signal == "long" else "SELL"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã BTC –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        btc_risk_pct = self.strategy.btc_risk_pct

        # print(f"üîç DEBUG: Creating BTC entry intent: {side} {btc_risk_pct}")

        return OrderIntent(
            symbol="BTCUSDT",
            side=side,
            sizing="risk_pct",
            size=btc_risk_pct,
            role="primary"
        )

    def _generate_eth_compensation_intent(
        self,
        btc_df: pd.DataFrame,
        current_btc_price: float,
        current_time: datetime,
        template,
        md: Dict[str, pd.DataFrame] # –î–æ–±–∞–≤–ª—è–µ–º md –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ETH
    ) -> Optional[OrderIntent]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ETH"""

        # print(f"üîç DEBUG: _generate_eth_compensation_intent called")
        verbose = getattr(getattr(self, 'strategy', None), 'verbose', False)

        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π BTC –ø–æ–∑–∏—Ü–∏–∏
        # –ª–∏–±–æ –≤ –ø–æ—Å—Ç-–æ–∫–Ω–æ –ø–æ—Å–ª–µ –µ—ë –∑–∞–∫—Ä—ã—Ç–∏—è (–ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö entry_price/side), –∏ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if self.strategy.state.compensation_triggered:
            if verbose:
                print("[COMP] –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω")
            return None
        # –¢—Ä–µ–±—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏ —Å—Ç–æ—Ä–æ–Ω—ã BTC
        if not getattr(self.strategy.state, 'btc_entry_price', None) or not getattr(self.strategy.state, 'btc_side', None):
            if verbose:
                print("[COMP] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö BTC (entry_price/side)")
            return None
        # –†–∞–∑—Ä–µ—à–∞–µ–º, –µ—Å–ª–∏ BTC –µ—â—ë –æ—Ç–∫—Ä—ã—Ç (btc_deal_id –µ—Å—Ç—å) –ò–õ–ò –µ—Å–ª–∏ –ø–æ—Å—Ç-–æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ
        btc_active = getattr(self.strategy.state, 'btc_deal_id', None) is not None
        post_window = self.strategy.can_compensate_after_close(current_time)
        if not (btc_active or post_window):
            if verbose:
                print("[COMP] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π BTC –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–æ—Å—Ç-–æ–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ")
            return None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ETH –ø–æ –∑–∞–ø—Ä–æ—Å—É
        eth_symbol = "ETHUSDT"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π DataFrame –¥–ª—è ETH –∏–∑ md
        full_eth_df = md.get(eth_symbol)
        if full_eth_df is None or full_eth_df.empty:
            if verbose:
                print(f"[COMP] –ù–µ—Ç ETH –¥–∞–Ω–Ω—ã—Ö –≤ market_data ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return None
        
        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞ ETH
        required_eth_candles = self.strategy.ema_slow + self.strategy.compensation_delay_candles + 10 # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ ETH –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        eth_df_filtered = full_eth_df[full_eth_df.index <= current_time]
        
        if len(eth_df_filtered) < required_eth_candles:
            if verbose:
                print(f"[COMP] ETH –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: –µ—Å—Ç—å {len(eth_df_filtered)}, –Ω—É–∂–Ω–æ {required_eth_candles}")
            return None
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ required_eth_candles –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        eth_df_for_analysis = eth_df_filtered.iloc[-required_eth_candles:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        if not self.strategy.should_trigger_compensation(btc_df, eth_df_for_analysis, current_btc_price, current_time):
            if verbose:
                print("[COMP] –£—Å–ª–æ–≤–∏—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (should_trigger_compensation=False)")
            return None
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è ETH (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å BTC). –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º BUY/SELL –ø–æ –≤—Ö–æ–¥—É –≤ BTC
        eth_side = self.strategy.get_eth_side()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ETH –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        eth_risk_pct = self.strategy.eth_risk_pct
        
        order_intent = OrderIntent(
            symbol="ETHUSDT",
            side=eth_side,
            sizing="risk_pct",
            size=eth_risk_pct,
            role="compensation"
        )
        # –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∏ –ø—Ä–∏–∑–Ω–∞–∫ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–ø—Ä–µ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤)
        self.strategy.update_state(eth_side=eth_side, compensation_triggered=True)
        if verbose:
            print(f"[COMP] –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: side={eth_side} risk_pct={eth_risk_pct}")
        return order_intent

    def _generate_close_intents(
        self,
        btc_df: pd.DataFrame,
        eth_df: pd.DataFrame = None,
        btc_position = None,
        eth_position = None
    ) -> List[OrderIntent]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        intents = []
        current_time = btc_df.index[-1] if hasattr(btc_df.index[-1], 'timestamp') else datetime.now()
        verbose = getattr(getattr(self, 'strategy', None), 'verbose', False)

        # BTC: –Ω–µ —Å–æ–∑–¥–∞—ë–º close-–∏–Ω—Ç–µ–Ω—Ç—ã ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É –Ω–∞ –±–∏—Ä–∂–µ
        if not btc_position:
            # –ï—Å–ª–∏ –ø–æ—Å—Ç-–æ–∫–Ω–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–æ ‚Äî –ù–ï —á–∏—Å—Ç–∏–º BTC-—Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å entry_price/side
            if not self.strategy.can_compensate_after_close(current_time):
                # –û–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ ‚Äî –º–æ–∂–Ω–æ –æ—á–∏—â–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ BTC
                self.strategy.clear_btc_state()
        else:
            # –î–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ BTC –ø–æ —Å–≤–æ–∏–º —É—Å–ª–æ–≤–∏—è–º
            try:
                should_close_btc, btc_reason = self.strategy.should_close_btc_position(btc_df, current_time)
                if should_close_btc:
                    if verbose:
                        print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–µ–º close –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è BTC: {btc_reason}")
                    intents.append(OrderIntent(
                        symbol="BTCUSDT",
                        side="SELL" if btc_position['side'] == "BUY" else "BUY",
                        sizing="close",
                        size=0,
                        role="close"
                    ))
            except Exception:
                pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ ETH
        if eth_position:
            # print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ ETH –ø–æ–∑–∏—Ü–∏–∏: {eth_position}")
            should_close_eth, eth_reason = self.strategy.should_close_eth_position(eth_df, current_time)
            # print(f"üîç DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ETH: close={should_close_eth}, reason='{eth_reason}'")
            # ETH: —Ä–∞–∑—Ä–µ—à–∞–µ–º close-–∏–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è emergency —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            if should_close_eth and isinstance(eth_reason, str) and "emergency_close" in eth_reason:
                if verbose:
                    print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–µ–º emergency close –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è ETH: {eth_reason}")
                intents.append(OrderIntent(
                    symbol="ETHUSDT",
                    side="SELL" if eth_position['side'] == "BUY" else "BUY",
                    sizing="close",
                    size=0,
                    role="close"
                ))
        else:
            # –ù–µ—Ç ETH ‚Äî –æ—á–∏—â–∞–µ–º ETH-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            self.strategy.clear_eth_state()

        return intents
