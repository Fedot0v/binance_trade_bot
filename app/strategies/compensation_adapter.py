from typing import Dict, List, Any, Optional
from datetime import datetime

import pandas as pd

from strategies.contracts import Decision, OrderIntent
from strategies.compensation_strategy import CompensationStrategy
from services.deal_service import DealService


def _sym_str(x) -> str:
    return x.value if hasattr(x, "value") else str(x)


class CompensationAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∏ —Ä–µ–∞–∫—Ü–∏—è"
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ö–æ–¥–æ–º –≤ BTC –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ ETH
    """

    id = "compensation-adapter"

    def __init__(self, compensation_strategy: CompensationStrategy, deal_service: DealService):
        self.strategy = compensation_strategy
        self.deal_service = deal_service

    def required_symbols(self, template) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: BTC –∏ ETH –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return ["BTCUSDT", "ETHUSDT"]

    async def decide(
        self,
        md: Dict[str, pd.DataFrame],
        template,
        open_state: Dict[str, Any] | None = None
    ) -> Decision:
        print(f"üîç DEBUG: CompensationAdapter.decide() called - VERSION FIXED")
        print(f"üîç DEBUG: Available symbols in md: {list(md.keys())}")
        print(f"üîç DEBUG: Template name: {getattr(template, 'template_name', 'unknown')}")
        print(f"üîç DEBUG: Strategy type: {type(self.strategy).__name__}")
        print(f"üîç DEBUG: Strategy name: {getattr(self.strategy, 'name', 'unknown')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ CompensationStrategy
        if not isinstance(self.strategy, CompensationStrategy):
            print(f"‚ùå ERROR: Wrong strategy type! Expected CompensationStrategy, got {type(self.strategy)}")
            return Decision(intents=[])

        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ BTC –∏ ETH
        """
        btc_symbol = "BTCUSDT"

        btc_df = md.get(btc_symbol)

        if btc_df is None or btc_df.empty:
            return Decision(intents=[])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
        current_btc_price = btc_df['close'].iloc[-1]
        current_time = btc_df.index[-1] if hasattr(btc_df.index[-1], 'timestamp') else datetime.now()

        # –ü–æ–ª—É—á–∞–µ–º ETH –¥–∞–Ω–Ω—ã–µ (–≤ dual orchestrator –æ–Ω–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã)
        eth_symbol = "ETHUSDT"
        eth_df = md.get(eth_symbol)
        print(f"‚úÖ CompensationAdapter: –†–∞–±–æ—Ç–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ BTC –∏ ETH")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º open_state –∏–∑ –±—ç–∫—Ç–µ—Å—Ç–∞ –≤–º–µ—Å—Ç–æ deal_service
        btc_position = None
        eth_position = None

        if open_state:
            if btc_symbol in open_state:
                btc_position = open_state[btc_symbol].get('position')
            if eth_symbol in open_state:
                eth_position = open_state[eth_symbol].get('position')

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: CompensationAdapter –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã–≤–∞—Ç—å ETH –±–µ–∑ BTC
        print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π - BTC: {btc_position is not None}, ETH: {eth_position is not None}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å ETH –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ BTC - —ç—Ç–æ –æ—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏
        if eth_position and not btc_position:
            print("‚ùå ERROR: ETH –ø–æ–∑–∏—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–µ–∑ BTC! –≠—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            # –°–æ–∑–¥–∞–µ–º intent –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è ETH –ø–æ–∑–∏—Ü–∏–∏
            close_eth_intent = OrderIntent(
                symbol="ETHUSDT",
                side="SELL" if eth_position['side'] == "BUY" else "BUY",
                sizing="close",
                size=0,
                role="emergency_close"
            )
            print(f"üö® CompensationAdapter: –°–æ–∑–¥–∞–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π intent –∑–∞–∫—Ä—ã—Ç–∏—è ETH: {close_eth_intent.symbol} {close_eth_intent.side} {close_eth_intent.role}")
            return Decision(intents=[close_eth_intent])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π –±—ç–∫—Ç–µ—Å—Ç–∞
        self._update_strategy_state_from_positions(btc_position, eth_position, current_time)

        print(f"üîç DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"   btc_deal_id: {self.strategy.state.btc_deal_id}")
        print(f"   btc_entry_price: {self.strategy.state.btc_entry_price}")
        print(f"   btc_side: {self.strategy.state.btc_side}")
        print(f"   eth_deal_id: {self.strategy.state.eth_deal_id}")
        print(f"   compensation_triggered: {self.strategy.state.compensation_triggered}")

        intents = []

        # –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ BTC (–µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏)
        if not btc_position:
            print("üîç DEBUG: –ù–µ—Ç BTC –ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥")
            btc_intent = self._generate_btc_entry_intent(btc_df, template)
            if btc_intent:
                print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–Ω BTC entry intent: {btc_intent.symbol} {btc_intent.side} {btc_intent.role}")
                intents.append(btc_intent)
            else:
                print("‚ùå CompensationAdapter: BTC entry intent –Ω–µ —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"üîç DEBUG: BTC –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –µ—Å—Ç—å: {btc_position}")

        # –õ–æ–≥–∏–∫–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ETH
        if btc_position and not eth_position:
            print("üîç DEBUG: –ï—Å—Ç—å BTC –ø–æ–∑–∏—Ü–∏—è, –Ω–µ—Ç ETH - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é")
            eth_intent = self._generate_eth_compensation_intent(
                btc_df, eth_df, current_btc_price, current_time, template
            )
            if eth_intent:
                print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–Ω ETH compensation intent: {eth_intent.symbol} {eth_intent.side} {eth_intent.role}")
                intents.append(eth_intent)
            else:
                print("‚ùå CompensationAdapter: ETH compensation intent –Ω–µ —Å–æ–∑–¥–∞–Ω")

        # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
        print("üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        close_intents = self._generate_close_intents(btc_df, eth_df, btc_position, eth_position)
        if close_intents:
            print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–Ω—ã close intents: {len(close_intents)}")
            intents.extend(close_intents)
        else:
            print("‚ùå CompensationAdapter: Close intents –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")

        print(f"üîç DEBUG: CompensationAdapter –∏—Ç–æ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–æ–≤: {len(intents)}")
        for i, intent in enumerate(intents):
            print(f"   Intent {i+1}: {intent.symbol} {intent.side} {intent.role}")
        return Decision(intents=intents)

    async def _get_open_deals(self, user_id, bot_id) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if self.deal_service and hasattr(self.deal_service, 'get_open_deals') and user_id and bot_id:
                return await self.deal_service.get_open_deals(user_id, bot_id)
            else:
                # –î–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")
            return []

    def _update_strategy_state(self, btc_deal, eth_deal):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫"""
        if btc_deal:
            self.strategy.update_state(
                btc_deal_id=btc_deal.id,
                btc_entry_price=btc_deal.entry_price,
                btc_entry_time=btc_deal.opened_at,
                btc_side=btc_deal.side
            )
        if eth_deal:
            self.strategy.update_state(
                eth_deal_id=eth_deal.id,
                compensation_triggered=True
            )

    def _update_strategy_state_from_positions(self, btc_position, eth_position, current_time):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if btc_position:
            self.strategy.update_state(
                btc_deal_id=btc_position.get('deal_id', 1),
                btc_entry_price=btc_position['entry_price'],
                btc_entry_time=btc_position['entry_time'],
                btc_side=btc_position['side']
            )
        if eth_position:
            self.strategy.update_state(
                eth_deal_id=eth_position.get('deal_id', 2),
                eth_entry_price=eth_position['entry_price'],
                eth_entry_time=eth_position['entry_time'],
                compensation_triggered=True
            )

    def _generate_btc_entry_intent(self, btc_df: pd.DataFrame, template) -> Optional[OrderIntent]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ BTC –ø–æ –ª–æ–≥–∏–∫–µ –Ω–æ–≤–∏—á–∫–∞"""
        signal = self.strategy.generate_signal(btc_df)

        print(f"üîç DEBUG: _generate_btc_entry_intent - signal: {signal}, df_len: {len(btc_df)}")

        if signal == "hold":
            print("üîç DEBUG: Signal is 'hold', returning None")
            return None

        side = "BUY" if signal == "long" else "SELL"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã BTC –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        btc_risk_pct = self.strategy.btc_risk_pct

        print(f"üîç DEBUG: Creating BTC entry intent: {side} {btc_risk_pct}")

        return OrderIntent(
            symbol="BTCUSDT",
            side=side,
            sizing="risk_pct",
            size=btc_risk_pct,
            role="primary"
        )

    def _generate_eth_compensation_intent(
        self,
        btc_df: pd.DataFrame,
        eth_df: pd.DataFrame,
        current_btc_price: float,
        current_time: datetime,
        template
    ) -> Optional[OrderIntent]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ETH"""

        print(f"üîç DEBUG: _generate_eth_compensation_intent called")

        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ BTC –ø–æ–∑–∏—Ü–∏–∏
        if not self.strategy.state.btc_deal_id or not self.strategy.state.btc_entry_price:
            print("‚ùå ERROR: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å ETH –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –±–µ–∑ BTC –ø–æ–∑–∏—Ü–∏–∏!")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        if not self.strategy.should_trigger_compensation(btc_df, current_btc_price, current_time):
            print("‚ùå Compensation conditions not met")
            return None
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è ETH (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é BTC)
        eth_side = self.strategy.get_eth_side()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ETH –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        eth_risk_pct = self.strategy.eth_risk_pct
        
        return OrderIntent(
            symbol="ETHUSDT",
            side=eth_side,
            sizing="risk_pct",
            size=eth_risk_pct,
            role="compensation"
        )

    def _generate_close_intents(
        self,
        btc_df: pd.DataFrame,
        eth_df: pd.DataFrame = None,
        btc_position = None,
        eth_position = None
    ) -> List[OrderIntent]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        intents = []
        current_time = btc_df.index[-1] if hasattr(btc_df.index[-1], 'timestamp') else datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ BTC
        if btc_position:
            print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ BTC –ø–æ–∑–∏—Ü–∏–∏: {btc_position}")
            should_close_btc, btc_reason = self.strategy.should_close_btc_position(btc_df, current_time)
            print(f"üîç DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ BTC: close={should_close_btc}, reason='{btc_reason}'")
            if should_close_btc:
                print(f"‚úÖ –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è BTC: {btc_reason}")
                intents.append(OrderIntent(
                    symbol="BTCUSDT",
                    side="SELL" if btc_position['side'] == "BUY" else "BUY",
                    sizing="close",
                    size=0,
                    role="close"
                ))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ ETH
        if eth_position:
            print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ ETH –ø–æ–∑–∏—Ü–∏–∏: {eth_position}")
            should_close_eth, eth_reason = self.strategy.should_close_eth_position(eth_df, current_time)
            print(f"üîç DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ETH: close={should_close_eth}, reason='{eth_reason}'")
            if should_close_eth:
                print(f"‚úÖ CompensationAdapter: –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è ETH: {eth_reason}")
                intents.append(OrderIntent(
                    symbol="ETHUSDT",
                    side="SELL" if eth_position['side'] == "BUY" else "BUY",
                    sizing="close",
                    size=0,
                    role="close"
                ))

        return intents
