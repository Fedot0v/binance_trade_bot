import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass

from strategies.base_strategy import BaseStrategy
from services.strategy_parameters import StrategyParameters
from strategies.contracts import Decision, OrderIntent
from schemas.user_strategy_template import UserStrategyTemplateRead


@dataclass
class CompensationState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"""
    btc_deal_id: Optional[int] = None
    eth_deal_id: Optional[int] = None
    btc_entry_price: Optional[float] = None
    btc_entry_time: Optional[datetime] = None
    btc_side: Optional[str] = None
    eth_entry_price: Optional[float] = None
    eth_entry_time: Optional[datetime] = None
    eth_side: Optional[str] = None
    btc_position: Optional[Dict] = None
    eth_position: Optional[Dict] = None
    compensation_triggered: bool = False
    compensation_time: Optional[datetime] = None
    compensation_signal_time: Optional[datetime] = None
    last_btc_price: Optional[float] = None
    btc_candles_against: int = 0
    btc_impulse_detected: bool = False
    partial_close_done: bool = False
    btc_closed_time: Optional[datetime] = None
    # –§–ª–∞–≥ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞: –±—ã–ª –ª–∏ –∫–æ–≥–¥–∞-–ª–∏–±–æ –æ—Ç–∫—Ä—ã—Ç BTC –≤ –≠–¢–û–ú –±—ç–∫—Ç–µ—Å—Ç–µ
    had_btc: bool = False
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π BTC-—Å–¥–µ–ª–∫–∏ (–¥–ª—è —Å–≤—è–∑–∏ –ø–æ—Å—Ç-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏)
    last_btc_deal_id: Optional[int] = None
    # –î–ª—è –∫–∞–∫–æ–≥–æ BTC deal —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è (–∑–∞–ø—Ä–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ ETH)
    compensation_done_for_deal_id: Optional[int] = None
    
    def reset_state(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.state.btc_deal_id = None
        self.state.eth_deal_id = None
        self.state.btc_entry_price = None
        self.state.btc_entry_time = None
        self.state.btc_side = None
        self.state.eth_entry_price = None
        self.state.eth_entry_time = None
        self.state.btc_position = None
        self.state.eth_position = None
        self.state.compensation_triggered = False
        self.state.compensation_time = None
        self.state.compensation_signal_time = None
        self.state.last_btc_price = None
        self.state.btc_candles_against = 0
        self.state.btc_impulse_detected = False
        self.state.partial_close_done = False


class CompensationStrategy(BaseStrategy):
    """
    –£–ú–ù–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∏ —Ä–µ–∞–∫—Ü–∏—è"
    
    –û—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ç–∏–≤: BTC; —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: ETH
    –í—Ö–æ–¥ –≤ BTC –ø–æ –ª–æ–≥–∏–∫–µ –Ω–æ–≤–∏—á–∫–∞, —É–º–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —á–µ—Ä–µ–∑ ETH –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏
    """
    
    def __init__(self, params: StrategyParameters):
        self.params = params
        
        self.ema_fast = self.params.get_int("ema_fast", 10)
        self.ema_slow = self.params.get_int("ema_slow", 30)
        self.trend_threshold = self.params.get_float("trend_threshold", 0.001)
        self.btc_risk_pct = self.params.get_float("btc_deposit_prct", 0.05)
        self.btc_stop_loss_pct = self.params.get_float("btc_stop_loss_pct", 0.012)
        self.btc_take_profit_pct = self.params.get_float("btc_take_profit_pct", 0.03)
        self.btc_leverage = self.params.get_int("btc_leverage", 10)
        
        self.eth_risk_pct = self.params.get_float("eth_deposit_prct", 0.1)
        self.eth_stop_loss_pct = self.params.get_float("eth_stop_loss_pct", 0.01)
        self.eth_take_profit_pct = self.params.get_float("eth_take_profit_pct", 0.015)
        self.eth_leverage = self.params.get_int("eth_leverage", 10)
        
        self.compensation_threshold = self.params.get_float("compensation_threshold", 0.005)
        self.compensation_delay_candles = self.params.get_int("compensation_delay_candles", 3)
        self.impulse_threshold = self.params.get_float("impulse_threshold", 0.004)
        self.candles_against_threshold = self.params.get_int("candles_against_threshold", 2)

        # –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        self.eth_confirmation_candles = self.params.get_int("eth_confirmation_candles", 3)
        self.require_eth_ema_alignment = self.params.get_bool("require_eth_ema_alignment", True)
        self.eth_volume_min_ratio = self.params.get_float("eth_volume_min_ratio", 0.0)  # 0.0 –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É
        self.high_adverse_threshold = self.params.get_float("high_adverse_threshold", 0.01)  # 1.0% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.max_compensation_window_candles = self.params.get_int("max_compensation_window_candles", 30)

        self.trailing_stop_pct = self.params.get_float("trailing_stop_pct", 0.003)
        # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –≤ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è BTC
        self.post_close_compensation_candles = self.params.get_int("post_close_compensation_candles", 5)

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –ø–æ ETH: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–£–Æ —Å—Ç–æ—Ä–æ–Ω—É –∫ BTC
        # True  -> ETH –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ BTC (—Ö–µ–¥–∂)
        # False -> ETH –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É, —á—Ç–æ –∏ BTC
        self.eth_compensation_opposite = self.params.get_bool("eth_compensation_opposite", True)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—Ç–ª–∏–≤–æ—Å—Ç—å—é –ª–æ–≥–æ–≤
        self.verbose = self.params.get_bool("verbose", False)

        print("üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        print(f"   EMA: fast={self.ema_fast} slow={self.ema_slow} threshold={self.trend_threshold*100:.2f}%")
        print(f"   BTC Stop Loss: {self.btc_stop_loss_pct:.4f} ({self.btc_stop_loss_pct*100:.2f}%)")
        print(f"   BTC Take Profit: {self.btc_take_profit_pct:.4f} ({self.btc_take_profit_pct*100:.2f}%)")
        print(f"   BTC Risk %: {self.btc_risk_pct:.4f} ({self.btc_risk_pct*100:.2f}%)")
        print(f"   ETH Stop Loss: {self.eth_stop_loss_pct:.4f} ({self.eth_stop_loss_pct*100:.2f}%)")
        print(f"   ETH Take Profit: {self.eth_take_profit_pct:.4f} ({self.eth_take_profit_pct*100:.2f}%)")
        print(f"   Compensation: threshold={self.compensation_threshold*100:.2f}% candles_against‚â•{self.candles_against_threshold} delay={self.compensation_delay_candles} max_window={self.max_compensation_window_candles} high_adverse={self.high_adverse_threshold*100:.2f}%")
        print(f"   ETH confirm: candles={self.eth_confirmation_candles} require_alignment={self.require_eth_ema_alignment}")
        print(f"   ETH volume check: {'disabled' if self.eth_volume_min_ratio <= 0 else f'min_ratio={self.eth_volume_min_ratio:.2f}'}")
        print(f"   Trailing stop %: {self.trailing_stop_pct*100:.2f}%")
        print(f"   Post-close window: {self.post_close_compensation_candles} candles")
        print(f"   ETH compensation side: {'opposite' if self.eth_compensation_opposite else 'same'} to BTC")

        self.state = CompensationState()
        self.interval = params.get_str("interval", "1m") # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π

    def required_symbols(self, template=None) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return ["BTCUSDT", "ETHUSDT"]

    def _parse_interval_to_minutes(self, interval_str: str) -> int:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ('1m', '5m', '1h', '1d') –≤ –º–∏–Ω—É—Ç—ã."""
        if interval_str.endswith('m'):
            return int(interval_str[:-1])
        elif interval_str.endswith('h'):
            return int(interval_str[:-1]) * 60
        elif interval_str.endswith('d'):
            return int(interval_str[:-1]) * 24 * 60
        else:
            return 1 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞

    def _get_ema_trend_signal(self, df: pd.DataFrame, ema_fast_span: int, ema_slow_span: int, trend_threshold: float) -> Optional[str]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA"""
        if len(df) < ema_slow_span:
            if self.verbose:
                print(f"[SIGNAL] BTC hold: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA (len={len(df)} < slow={ema_slow_span})")
            return None

        ema_fast = df['close'].ewm(span=ema_fast_span).mean()
        ema_slow = df['close'].ewm(span=ema_slow_span).mean()

        fast_val = float(ema_fast.iloc[-1])
        slow_val = float(ema_slow.iloc[-1])
        diff = abs(fast_val - slow_val) / slow_val if slow_val != 0 else 0.0
        if self.verbose:
            print(f"[SIGNAL] BTC EMA fast={fast_val:.2f} slow={slow_val:.2f} diff={diff*100:.2f}% threshold={trend_threshold*100:.2f}%")
        if diff < trend_threshold:
            if self.verbose:
                print("[SIGNAL] BTC hold: |EMA_fast-EMA_slow| –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ —Ç—Ä–µ–Ω–¥–∞")
            return 'hold'

        trend = 'long' if fast_val > slow_val else 'short'
        if self.verbose:
            print(f"[SIGNAL] BTC —Ç—Ä–µ–Ω–¥: {trend} (EMA_fast {'>' if fast_val > slow_val else '<'} EMA_slow)")
        return trend

    def generate_signal(self, df: pd.DataFrame) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è BTC –ø–æ –ª–æ–≥–∏–∫–µ –Ω–æ–≤–∏—á–∫–∞"""
        signal = self._get_ema_trend_signal(df, self.ema_fast, self.ema_slow, self.trend_threshold)
        final_signal = signal or 'hold'
        if final_signal == 'hold' and signal is None:
            # –£–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤–Ω—É—Ç—Ä–∏ _get_ema_trend_signal (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)
            pass
        else:
            if self.verbose:
                print(f"[SIGNAL] BTC –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {final_signal}")
        return final_signal

    def calculate_position_size(self, balance: float, symbol: str = "BTC") -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è BTC –∏–ª–∏ ETH"""
        if symbol == "BTC":
            return balance * self.btc_risk_pct
        else:
            return balance * self.eth_risk_pct
    
    def calculate_stop_loss_price(self, entry_price: float, side: str, symbol: str = "BTC") -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è BTC –∏–ª–∏ ETH.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∫ 'BUY'/'SELL' –∏ 'long'/'short'.
        """
        sym = (symbol or "BTC").upper()
        is_btc = sym == "BTC" or sym.startswith("BTC")
        stop_loss_pct = self.btc_stop_loss_pct if is_btc else self.eth_stop_loss_pct

        side_upper = (side or "").upper()
        is_long = side_upper in ("BUY", "LONG")

        if is_long:
            return entry_price * (1 - stop_loss_pct)
        return entry_price * (1 + stop_loss_pct)

    def calculate_take_profit_price(self, entry_price: float, side: str, symbol: str = "BTC") -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è BTC –∏–ª–∏ ETH.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∫ 'BUY'/'SELL' –∏ 'long'/'short'.
        """
        sym = (symbol or "BTC").upper()
        is_btc = sym == "BTC" or sym.startswith("BTC")
        take_profit_pct = self.btc_take_profit_pct if is_btc else self.eth_take_profit_pct

        side_upper = (side or "").upper()
        is_long = side_upper in ("BUY", "LONG")

        if is_long:
            return entry_price * (1 + take_profit_pct)
        return entry_price * (1 - take_profit_pct)

    def should_trigger_compensation(self, btc_df: pd.DataFrame, eth_df: pd.DataFrame, current_price: float, current_time: datetime) -> bool:
        """
        –£–ú–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏:
        - BTC –∏–¥—ë—Ç –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ >= compensation_threshold
        - –º–∏–Ω–∏–º—É–º candles_against_threshold —Å–≤–µ—á–µ–π –ø—Ä–æ—Ç–∏–≤
        - –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ compensation_delay_candles
        - —Ç—Ä–µ–Ω–¥ ETH –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ BTC (EMA)
        - –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–æ–±—ä—ë–º—ã)
        """
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –¥–≤—É—Ö —Å–ª—É—á–∞—è—Ö:
        # 1) BTC –ø–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ (btc_deal_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        # 2) BTC –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ (btc_closed_time —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω) –∏ –º—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞ –ø–æ—Å—Ç-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        if not self.state.btc_entry_price:
            print("[COMP] –ù–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –ø–æ BTC –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è")
            return False
        if self.state.btc_deal_id is None:
            if not self.state.btc_closed_time:
                if self.verbose:
                    print("[COMP] BTC —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏ –Ω–µ—Ç –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä—ã—Ç–∏—è ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è")
                return False
            interval_minutes = self._parse_interval_to_minutes(self.interval)
            candles_since_close = (current_time - self.state.btc_closed_time).total_seconds() / (interval_minutes * 60)
            if candles_since_close > self.post_close_compensation_candles:
                if self.verbose:
                    print(f"[COMP] –ò—Å—Ç–µ–∫–ª–æ –ø–æ—Å—Ç-–æ–∫–Ω–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: –ø—Ä–æ—à–ª–æ {candles_since_close:.1f} —Å–≤–µ—á–µ–π > {self.post_close_compensation_candles}")
                return False
            if self.verbose:
                print(f"[COMP] BTC –∑–∞–∫—Ä—ã—Ç –Ω–µ–¥–∞–≤–Ω–æ ({candles_since_close:.1f} —Å–≤–µ—á–µ–π –Ω–∞–∑–∞–¥) ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –≤ –ø–æ—Å—Ç-–æ–∫–Ω–µ")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π –∏ –∏–º–ø—É–ª—å—Å
        self._update_candles_analysis(btc_df)
        self._check_impulse(btc_df)
        if self.verbose:
            print(f"[COMP] –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: candles_against={self.state.btc_candles_against} impulse={self.state.btc_impulse_detected}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        if self.state.btc_side == "BUY":
            adverse_pct = (self.state.btc_entry_price - current_price) / self.state.btc_entry_price
        else:
            adverse_pct = (current_price - self.state.btc_entry_price) / self.state.btc_entry_price
        if self.verbose:
            print(f"[COMP] –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ BTC: {adverse_pct*100:.3f}% | threshold={self.compensation_threshold*100:.2f}%")

        # –î–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ø–æ—Ä–æ–≥
        if adverse_pct < self.compensation_threshold:
            self.state.compensation_signal_time = None
            if self.verbose:
                print("[COMP] –ü–æ—Ä–æ–≥ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            return False

        # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ —Å–≤–µ—á–µ–π –ø—Ä–æ—Ç–∏–≤
        if self.state.btc_candles_against < self.candles_against_threshold:
            if self.verbose:
                print(f"[COMP] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –ø—Ä–æ—Ç–∏–≤: {self.state.btc_candles_against} < {self.candles_against_threshold}")
            return False

        # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        if self.state.compensation_signal_time is None:
            self.state.compensation_signal_time = current_time
            if self.verbose:
                print(f"[COMP] –°—Ç–∞—Ä—Ç –æ–∫–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: t0={self.state.compensation_signal_time}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–≤–µ—á–∞—Ö
        interval_minutes = self._parse_interval_to_minutes(self.interval)
        candles_passed = (current_time - self.state.compensation_signal_time).total_seconds() / (interval_minutes * 60)
        # –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—Ö–æ–¥: —Å–∏–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ BTC ‚Äî –º–æ–∂–Ω–æ –Ω–µ –∂–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ETH
        if adverse_pct >= self.high_adverse_threshold:
            if self.verbose:
                print(f"[COMP] –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—Ö–æ–¥: –ø—Ä–æ—Å–∞–¥–∫–∞ {adverse_pct*100:.2f}% ‚â• {self.high_adverse_threshold*100:.2f}% ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ETH")
            return True

        if candles_passed < self.compensation_delay_candles:
            if self.verbose:
                print(f"[COMP] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏: –ø—Ä–æ—à–ª–æ {candles_passed:.1f} —Å–≤–µ—á–µ–π –∏–∑ {self.compensation_delay_candles}")
            return False

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–∫–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        if candles_passed > self.max_compensation_window_candles:
            if self.verbose:
                print(f"[COMP] –ò—Å—Ç–µ–∫–ª–æ –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: –ø—Ä–æ—à–ª–æ {candles_passed:.1f} —Å–≤–µ—á–µ–π > {self.max_compensation_window_candles}")
            self.state.compensation_signal_time = None
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥ ETH
        if eth_df.empty or len(eth_df) < self.ema_slow:
            if self.verbose:
                print("[COMP] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞")
            return False

        eth_trend = self._get_ema_trend_signal(eth_df, self.ema_fast, self.ema_slow, self.trend_threshold)
        btc_trend = 'long' if self.state.btc_side == 'BUY' else 'short'
        expected_eth_trend = ('short' if btc_trend == 'long' else 'long') if self.eth_compensation_opposite else btc_trend
        if self.require_eth_ema_alignment and eth_trend != expected_eth_trend:
            if self.verbose:
                print(f"[COMP] ETH —Ç—Ä–µ–Ω–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: eth={eth_trend} vs expected_eth={expected_eth_trend} (btc={btc_trend}, mode={'opposite' if self.eth_compensation_opposite else 'same'})")
            return False

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ N —Å–≤–µ—á–∞–º–∏ ETH –≤ —Å—Ç–æ—Ä–æ–Ω—É BTC
        n = max(1, int(self.eth_confirmation_candles))
        if len(eth_df) < n:
            if self.verbose:
                print(f"[COMP] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH —Å–≤–µ—á–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(eth_df)} < {n}")
            return False
        eth_last = eth_df.iloc[-n:]
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –¥–ª—è ETH-—Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        eth_side_for_entry = self.get_eth_side()
        if eth_side_for_entry == 'BUY':
            green_count = int((eth_last['close'] > eth_last['open']).sum())
            dir_ok = green_count == n and float(eth_last['close'].iloc[-1]) > float(eth_last['close'].iloc[0])
        else:
            red_count = int((eth_last['close'] < eth_last['open']).sum())
            dir_ok = red_count == n and float(eth_last['close'].iloc[-1]) < float(eth_last['close'].iloc[0])
        if not dir_ok:
            if self.verbose:
                print(f"[COMP] ETH –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª {n} —Å–≤–µ—á–∞–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ({eth_side_for_entry}) ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            return False

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–∞–º–∏ ETH (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        if self.eth_volume_min_ratio > 0:
            recent_vol = float(eth_last['volume'].mean())
            base_window = min(len(eth_df) - n, n * 4)
            if base_window <= 0:
                if self.verbose:
                    print("[COMP] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ETH –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ–±—ä—ë–º–∞")
                return False
            base_vol = float(eth_df['volume'].iloc[-(n+base_window):-n].mean())
            vol_ratio = recent_vol / base_vol if base_vol > 0 else 0.0
            if vol_ratio < self.eth_volume_min_ratio:
                if self.verbose:
                    print(f"[COMP] –û–±—ä—ë–º ETH —Å–ª–∞–±—ã–π: ratio={vol_ratio:.2f} < {self.eth_volume_min_ratio:.2f}")
                return False

        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        quality = self.get_compensation_quality_score(btc_df, eth_df)
        if self.verbose:
            print(f"[COMP] –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: corr_ok={quality.get('correlation_ok')} eth_dir_ok={quality.get('eth_direction_ok')} score={quality.get('score')}")
        if not (quality.get("correlation_ok") and quality.get("eth_direction_ok")):
            if self.verbose:
                print("[COMP] –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            return False

        return True

    def mark_btc_closed(self, current_time: datetime) -> None:
        """–ü–æ–º–µ—á–∞–µ—Ç BTC –∫–∞–∫ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—É—é, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ—Å—Ç-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é.
        –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —ç—Ç–æ–º –±—ç–∫—Ç–µ—Å—Ç–µ —É–∂–µ –±—ã–ª —Ä–µ–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ –≤ BTC (had_btc=True).
        """
        if not getattr(self.state, 'had_btc', False):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ BTC –≤ —ç—Ç–æ–º –ø—Ä–æ–≥–æ–Ω–µ
            return
        if not self.state.btc_closed_time:
            self.state.btc_closed_time = current_time
            print(f"[COMP] BTC –ø–æ–∑–∏—Ü–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–∞—è: t_close={self.state.btc_closed_time}")

    def can_compensate_after_close(self, current_time: datetime) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –µ—â—ë –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è BTC (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞)."""
        if not self.state.btc_closed_time:
            return False
        interval_minutes = self._parse_interval_to_minutes(self.interval)
        candles_since_close = (current_time - self.state.btc_closed_time).total_seconds() / (interval_minutes * 60)
        return candles_since_close <= self.post_close_compensation_candles

    def get_compensation_quality_score(self, btc_df: pd.DataFrame, eth_df: pd.DataFrame) -> Dict[str, float]:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        if len(btc_df) < 20 or len(eth_df) < 20:
            return {"volume_ok": False, "correlation_ok": False, "eth_direction_ok": False, "score": 0.0}
        
        btc_last_time = btc_df.index[-1]
        eth_last_time = eth_df.index[-1]
        
        time_diff = abs((btc_last_time - eth_last_time).total_seconds())
        if time_diff > 60:
            return {"volume_ok": False, "correlation_ok": False, "eth_direction_ok": False, "score": 0.0}
        
        btc_current_time = btc_df.index[-1]
        
        eth_time_diff = abs(eth_df.index - btc_current_time)
        eth_current_idx = eth_time_diff.argmin()
        
        btc_volume_ratio = btc_df['volume'].iloc[-5:].mean() / btc_df['volume'].iloc[-20:].mean()
        
        if eth_current_idx >= 19:
            eth_volume_ratio = eth_df['volume'].iloc[eth_current_idx-4:eth_current_idx+1].mean() / eth_df['volume'].iloc[eth_current_idx-19:eth_current_idx+1].mean()
        else:
            eth_volume_ratio = 1.0
        
        if len(btc_df) >= 10 and eth_current_idx >= 9:
            btc_prices = btc_df['close'].iloc[-10:].values
            eth_prices = eth_df['close'].iloc[eth_current_idx-9:eth_current_idx+1].values
            correlation = pd.Series(btc_prices).corr(pd.Series(eth_prices))
        else:
            correlation = 0.8
        
        eth_direction_ok = False
        if len(eth_df) >= 5:
            eth_side = self.get_eth_side()
            
            btc_current_time = btc_df.index[-1]
            eth_current_time = eth_df.index[-1]
            
            if abs((btc_current_time - eth_current_time).total_seconds()) > 120:
                return {
                    "volume_ok": volume_ok,
                    "correlation_ok": correlation_ok,
                    "eth_direction_ok": False,
                    "btc_volume_ratio": btc_volume_ratio,
                    "eth_volume_ratio": eth_volume_ratio,
                    "correlation": correlation,
                    "score": 0.0
                }
            
            btc_current_time = btc_df.index[-1]
            
            eth_time_diff = abs(eth_df.index - btc_current_time)
            eth_current_idx = eth_time_diff.argmin()
            
            if eth_current_idx >= 4:
                eth_prices = eth_df['close'].iloc[eth_current_idx-4:eth_current_idx+1].values
                eth_volumes = eth_df['volume'].iloc[eth_current_idx-2:eth_current_idx+1].values
            else:
                eth_prices = eth_df['close'].iloc[:eth_current_idx+1].values
                eth_volumes = eth_df['volume'].iloc[:eth_current_idx+1].values
            
            if eth_side == "BUY":
                price_trend = eth_prices[4] > eth_prices[0]
                volume_confirmation = eth_volumes[2] > eth_volumes[0] * 0.5
                if price_trend and volume_confirmation:
                    eth_direction_ok = True
            elif eth_side == "SELL":
                price_trend = eth_prices[4] < eth_prices[0]
                volume_confirmation = eth_volumes[2] > eth_volumes[0] * 0.5
                if price_trend and volume_confirmation:
                    eth_direction_ok = True
        
        volume_ok = btc_volume_ratio > 0.5 and eth_volume_ratio > 0.5
        correlation_ok = correlation > 0.2
        
        quality_score = 0.0
        if volume_ok:
            quality_score += 25
        if correlation_ok:
            quality_score += 25
        if eth_direction_ok:
            quality_score += 50
        if btc_volume_ratio > 1.2:
            quality_score += 10
        if eth_volume_ratio > 1.2:
            quality_score += 10
        
        return {
            "volume_ok": volume_ok,
            "correlation_ok": correlation_ok,
            "eth_direction_ok": eth_direction_ok,
            "btc_volume_ratio": btc_volume_ratio,
            "eth_volume_ratio": eth_volume_ratio,
            "correlation": correlation,
            "score": quality_score
        }

    def get_compensation_size_multiplier(self, price_change_pct: float) -> float:
        """
        –£–ú–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞–∑–º–µ—Ä–∞ ETH –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è
        (–°–¥–µ–ª–∞–Ω–æ –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —É–±—ã—Ç–∫–æ–≤)
        """
        if price_change_pct > 0.005:
            return 1.2
        elif price_change_pct > 0.003:
            return 1.1
        else:
            return 0.8

    def should_partial_close_btc(self, btc_pnl: float, eth_pnl: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—å BTC –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        """
        return eth_pnl > 0 and abs(eth_pnl) > abs(btc_pnl) * 0.5

    def should_close_both_positions(self, btc_pnl: float, eth_pnl: float) -> bool:
        """
        –ó–ê–©–ò–¢–ê –û–¢ –î–í–û–ô–ù–û–ì–û –£–ë–´–¢–ö–ê: –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –æ–±–µ –≤ —É–±—ã—Ç–∫–µ
        """
        return btc_pnl < 0 and eth_pnl < 0

    def create_compensation_position(self, current_eth_price: float, current_time: datetime, 
                                   price_change_pct: float, balance: float) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ETH —Å —É–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        eth_side = self.get_eth_side()
        size_multiplier = self.get_compensation_size_multiplier(price_change_pct)
        
        position = {
            'entry_time': current_time,
            'entry_price': current_eth_price,
            'side': eth_side,
            'size': balance * self.eth_risk_pct * size_multiplier,
            'leverage': self.eth_leverage,
            'stop_loss': self.calculate_stop_loss_price(current_eth_price, eth_side, 'ETH'),
            'take_profit': self.calculate_take_profit_price(current_eth_price, eth_side, 'ETH'),
            'trailing_stop': self.calculate_stop_loss_price(current_eth_price, eth_side, 'ETH'),
            'size_multiplier': size_multiplier
        }
        
        return position

    def update_trailing_stop(self, position: Dict, current_price: float) -> float:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç trailing stop –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
        if position['side'] == 'BUY':
            new_stop = current_price * (1 - self.trailing_stop_pct)
            return max(position.get('trailing_stop', position['stop_loss']), new_stop)
        else:
            new_stop = current_price * (1 + self.trailing_stop_pct)
            return min(position.get('trailing_stop', position['stop_loss']), new_stop)

    def _update_candles_analysis(self, df: pd.DataFrame) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–µ—á–∏ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏"""
        if len(df) < 3 or not self.state.btc_side:
            return
            
        candles_against = 0
        for i in range(len(df) - 2, len(df)):
            candle = df.iloc[i]
            prev_candle = df.iloc[i-1] if i > 0 else candle
            
            if candle['close'] > candle['open']:
                candle_direction = "up"
            else:
                candle_direction = "down"
            if self.state.btc_side == "BUY" and candle_direction == "down":
                candles_against += 1
            elif self.state.btc_side == "SELL" and candle_direction == "up":
                candles_against += 1
                
        self.state.btc_candles_against = candles_against

    def _check_impulse(self, df: pd.DataFrame) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–º–ø—É–ª—å—Å–∞ >0.4%"""
        if len(df) < 2 or not self.state.btc_side:
            return
            
        current_candle = df.iloc[-1]
        prev_candle = df.iloc[-2]
        
        price_change_pct = abs(current_candle['close'] - prev_candle['close']) / prev_candle['close']
        
        if self.state.btc_side == "BUY" and current_candle['close'] < prev_candle['close']:
            if price_change_pct > self.impulse_threshold:
                self.state.btc_impulse_detected = True
        elif self.state.btc_side == "SELL" and current_candle['close'] > prev_candle['close']:
            if price_change_pct > self.impulse_threshold:
                self.state.btc_impulse_detected = True

    def should_close_btc_position(self, btc_df: pd.DataFrame, current_time: datetime) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é BTC (–í–°–ï –£–°–õ–û–í–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω—É–∂–Ω–æ_–∑–∞–∫—Ä—ã—Ç—å, –ø—Ä–∏—á–∏–Ω–∞)
        """
        # print(f"üîç –í—ã–∑–≤–∞–Ω should_close_btc_position: deal_id={self.state.btc_deal_id}, entry_price={self.state.btc_entry_price}")

        if not self.state.btc_entry_price:
            # print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏–∏ BTC (–Ω–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞)")
            return False, ""

        if self.state.btc_deal_id is None:
            # print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏–∏ BTC (deal_id is None)")
            return False, ""

        current_btc_price = btc_df['close'].iloc[-1]

        btc_position = {
            'side': self.state.btc_side,
            'take_profit': self.calculate_take_profit_price(self.state.btc_entry_price, self.state.btc_side, 'BTC'),
            'stop_loss': self.calculate_stop_loss_price(self.state.btc_entry_price, self.state.btc_side, 'BTC'),
            'trailing_stop': self.calculate_stop_loss_price(self.state.btc_entry_price, self.state.btc_side, 'BTC'),
            'entry_time': self.state.btc_entry_time
        }

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        # print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è BTC –ø–æ–∑–∏—Ü–∏–∏:")
        # print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${current_btc_price:.2f}")
        # print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${self.state.btc_entry_price:.2f}")
        # print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {btc_position['side']}")
        # print(f"   Take Profit: ${btc_position['take_profit']:.2f}")
        # print(f"   Stop Loss: ${btc_position['stop_loss']:.2f}")
        # print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {(current_btc_price - self.state.btc_entry_price) / self.state.btc_entry_price * 100:.2f}%")
        
        if (btc_position['side'] == 'BUY' and current_btc_price >= btc_position['take_profit']) or \
           (btc_position['side'] == 'SELL' and current_btc_price <= btc_position['take_profit']):
            # print(f"üéØ –¢–ï–ô–ö-–ü–†–û–§–ò–¢! –¶–µ–Ω–∞ {current_btc_price} {'–≤—ã—à–µ' if btc_position['side'] == 'BUY' else '–Ω–∏–∂–µ'} —É—Ä–æ–≤–Ω—è {btc_position['take_profit']}")
            return True, "take_profit"
        
        if (btc_position['side'] == 'BUY' and current_btc_price <= btc_position['trailing_stop']) or \
           (btc_position['side'] == 'SELL' and current_btc_price >= btc_position['trailing_stop']):
            return True, "trailing_stop"
        
        if (btc_position['side'] == 'BUY' and current_btc_price <= btc_position['stop_loss']) or \
           (btc_position['side'] == 'SELL' and current_btc_price >= btc_position['stop_loss']):
            # print(f"üõë –°–¢–û–ü-–õ–û–°–°! –¶–µ–Ω–∞ {current_btc_price} {'–Ω–∏–∂–µ' if btc_position['side'] == 'BUY' else '–≤—ã—à–µ'} —É—Ä–æ–≤–Ω—è {btc_position['stop_loss']}")
            return True, "stop_loss"
        
        if self.state.btc_entry_price and self.state.btc_entry_time:
            if self.state.btc_side == 'BUY':
                trailing_stop = current_btc_price * (1 - self.trailing_stop_pct)
            else:
                trailing_stop = current_btc_price * (1 + self.trailing_stop_pct)
            if (btc_position['side'] == 'BUY' and current_btc_price <= trailing_stop) or \
               (btc_position['side'] == 'SELL' and current_btc_price >= trailing_stop):
                return True, "trailing_stop"
                
        return False, ""

    def should_close_eth_position(self, eth_df: pd.DataFrame, current_time: datetime) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é ETH (–í–°–ï –£–°–õ–û–í–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω—É–∂–Ω–æ_–∑–∞–∫—Ä—ã—Ç—å, –ø—Ä–∏—á–∏–Ω–∞)
        """
        if self.state.eth_deal_id is None:
            return False, ""

        current_eth_price = eth_df['close'].iloc[-1]

        # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–æ—Ä–æ–Ω—É ETH –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ –∑–∞–≤–∏—Å–µ–ª–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è BTC
        eth_side = self.state.eth_side or self.get_eth_side()

        if hasattr(self.state, 'eth_entry_price') and self.state.eth_entry_price:
            eth_entry_price = self.state.eth_entry_price
        else:
            eth_entry_price = current_eth_price

        take_profit_price = self.calculate_take_profit_price(eth_entry_price, eth_side, 'ETH')
        stop_loss_price = self.calculate_stop_loss_price(eth_entry_price, eth_side, 'ETH')

        # print(f"üîç DEBUG: ETH Close Check | Side: {eth_side} | Entry: {eth_entry_price:.2f} | Current: {current_eth_price:.2f}")
        # print(f"üîç DEBUG: ETH Levels | TP: {take_profit_price:.2f} | SL: {stop_loss_price:.2f}")

        if (eth_side == 'BUY' and current_eth_price >= take_profit_price) or \
           (eth_side == 'SELL' and current_eth_price <= take_profit_price):
            return True, "take_profit"

        if (eth_side == 'BUY' and current_eth_price <= stop_loss_price) or \
           (eth_side == 'SELL' and current_eth_price >= stop_loss_price):
            return True, "stop_loss"

        if eth_side == 'BUY':
            trailing_stop = current_eth_price * (1 - self.trailing_stop_pct)
        else:
            trailing_stop = current_eth_price * (1 + self.trailing_stop_pct)

        if (eth_side == 'BUY' and current_eth_price <= trailing_stop) or \
           (eth_side == 'SELL' and current_eth_price >= trailing_stop):
            # print(f"üìà ETH TRAILING-STOP! –¶–µ–Ω–∞ {current_eth_price:.2f} –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è {trailing_stop:.2f}")
            return True, "trailing_stop"

        if self.state.eth_entry_time:
            emergency_close, emergency_reason = self.should_emergency_close_eth(0, self.state.eth_entry_time, current_time)
            if emergency_close:
                # print(f"üö® ETH EMERGENCY CLOSE! {emergency_reason}")
                return True, emergency_reason

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ —Ç—Ä–µ–Ω–¥ ETH —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –±—ã—Å—Ç—Ä–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
        if len(eth_df) >= self.ema_slow and self.state.eth_entry_time:
            interval_minutes = self._parse_interval_to_minutes(self.interval)
            candles_since_entry = (current_time - self.state.eth_entry_time).total_seconds() / (interval_minutes * 60)
            # –ñ–¥—ë–º –º–∏–Ω–∏–º—É–º 2 —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
            if candles_since_entry >= max(2, self.compensation_delay_candles // 2):
                eth_trend = self._get_ema_trend_signal(eth_df, self.ema_fast, self.ema_slow, self.trend_threshold)
                expected_trend = 'long' if eth_side == 'BUY' else 'short'
                if eth_trend and eth_trend != expected_trend:
                    return True, "eth_trend_mismatch"

        return False, ""



    def get_eth_side(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è ETH –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∂–∏–º–æ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.
        –ï—Å–ª–∏ eth_compensation_opposite=True ‚Äî –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –∫ BTC, –∏–Ω–∞—á–µ –≤ —Ç—É –∂–µ —Å—Ç–æ—Ä–æ–Ω—É.
        """
        btc_side = self.state.btc_side
        if btc_side is None:
            return 'BUY'
        if self.eth_compensation_opposite:
            return 'SELL' if btc_side == 'BUY' else 'BUY'
        return btc_side


    def update_state(self, btc_deal_id: Optional[int] = None,
                    eth_deal_id: Optional[int] = None,
                    btc_entry_price: Optional[float] = None,
                    btc_entry_time: Optional[datetime] = None,
                    btc_side: Optional[str] = None,
                    eth_entry_price: Optional[float] = None,
                    eth_entry_time: Optional[datetime] = None,
                    eth_side: Optional[str] = None,
                    compensation_triggered: bool = False) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if btc_deal_id is not None:
            self.state.btc_deal_id = btc_deal_id
        if eth_deal_id is not None:
            self.state.eth_deal_id = eth_deal_id
        if btc_entry_price is not None:
            self.state.btc_entry_price = btc_entry_price
        if btc_entry_time is not None:
            self.state.btc_entry_time = btc_entry_time
        if btc_side is not None:
            self.state.btc_side = btc_side
        if eth_entry_price is not None:
            self.state.eth_entry_price = eth_entry_price
        if eth_entry_time is not None:
            self.state.eth_entry_time = eth_entry_time
        if eth_side is not None:
            self.state.eth_side = eth_side
        if compensation_triggered:
            self.state.compensation_triggered = True
            self.state.compensation_time = datetime.now()

    def reset_state(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.state = CompensationState()

    # –ù–æ–≤–æ–µ: —è–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π BTC/ETH, –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã
    def clear_btc_state(self) -> None:
        self.state.btc_deal_id = None
        self.state.btc_entry_price = None
        self.state.btc_entry_time = None
        self.state.btc_side = None
        # –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ BTC —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã/—Ñ–ª–∞–≥–∏
        self.state.compensation_triggered = False
        self.state.compensation_time = None
        self.state.compensation_signal_time = None
        self.state.btc_candles_against = 0
        self.state.btc_impulse_detected = False

    def clear_eth_state(self) -> None:
        self.state.eth_deal_id = None
        self.state.eth_entry_price = None
        self.state.eth_entry_time = None
        self.state.eth_side = None

    def should_close_both_positions(self, btc_pnl: float, eth_pnl: float) -> bool:
        """
        –ó–ê–©–ò–¢–ê –û–¢ –î–í–û–ô–ù–û–ì–û –£–ë–´–¢–ö–ê: –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –æ–±–µ –≤ —É–±—ã—Ç–∫–µ
        """

        return btc_pnl < 0 and eth_pnl < 0

    def should_emergency_close_eth(self, eth_pnl: float, eth_entry_time: datetime, current_time: datetime) -> Tuple[bool, str]:
        """
        –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï ETH: –µ—Å–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
        """
        time_in_trade = (current_time - eth_entry_time).total_seconds() / 60
        should_close = eth_pnl < 0 and time_in_trade > 30
        reason = f'emergency_close_after_{time_in_trade:.1f}_minutes' if should_close else ''
        return should_close, reason

    def check_compensation_management(self, btc_pnl: float, eth_pnl: float, current_time: datetime) -> Dict[str, any]:
        """
        –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ï–ô: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ—à–µ–Ω–∏—è–º–∏
        """
        result = {
            'close_both': False,
            'emergency_close_eth': False,
            'partial_close_btc': False,
            'reason': ''
        }
        
        if self.should_close_both_positions(btc_pnl, eth_pnl):
            result['close_both'] = True
            result['reason'] = 'double_loss_protection'
            return result
        
        if self.state.eth_entry_time:
            emergency_close, emergency_reason = self.should_emergency_close_eth(eth_pnl, self.state.eth_entry_time, current_time)
            if emergency_close:
                result['emergency_close_eth'] = True
                result['reason'] = emergency_reason
                return result
        
        if self.should_partial_close_btc(btc_pnl, eth_pnl):
            result['partial_close_btc'] = True
            result['reason'] = 'successful_compensation'
        
        return result

    def calculate_pnl(self, position: Dict, current_price: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç PnL –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
        """
        if not position:
            return 0.0
        
        entry_price = position['entry_price']
        size = position['size']
        leverage = position.get('leverage', 1)
        
        if position['side'] == 'BUY':
            price_change_pct = (current_price - entry_price) / entry_price
        else:
            price_change_pct = (entry_price - current_price) / entry_price
        
        return size * price_change_pct * leverage
