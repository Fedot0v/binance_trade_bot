import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass

from strategies.base_strategy import BaseStrategy
from services.strategy_parameters import StrategyParameters
from strategies.contracts import Decision, OrderIntent
from schemas.user_strategy_template import UserStrategyTemplateRead


@dataclass
class CompensationState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"""
    btc_deal_id: Optional[int] = None
    eth_deal_id: Optional[int] = None
    btc_entry_price: Optional[float] = None
    btc_entry_time: Optional[datetime] = None
    btc_side: Optional[str] = None
    eth_entry_price: Optional[float] = None  # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤ ETH –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
    eth_entry_time: Optional[datetime] = None  # –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ ETH –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
    btc_position: Optional[Dict] = None  # –ü–æ–∑–∏—Ü–∏—è BTC
    eth_position: Optional[Dict] = None  # –ü–æ–∑–∏—Ü–∏—è ETH
    compensation_triggered: bool = False
    compensation_time: Optional[datetime] = None
    compensation_signal_time: Optional[datetime] = None  # –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
    last_btc_price: Optional[float] = None
    btc_candles_against: int = 0
    btc_impulse_detected: bool = False
    partial_close_done: bool = False  # –§–ª–∞–≥ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è BTC
    
    def reset_state(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.state.btc_deal_id = None
        self.state.eth_deal_id = None
        self.state.btc_entry_price = None
        self.state.btc_entry_time = None
        self.state.btc_side = None
        self.state.eth_entry_price = None
        self.state.eth_entry_time = None
        self.state.btc_position = None
        self.state.eth_position = None
        self.state.compensation_triggered = False
        self.state.compensation_time = None
        self.state.compensation_signal_time = None
        self.state.last_btc_price = None
        self.state.btc_candles_against = 0
        self.state.btc_impulse_detected = False
        self.state.partial_close_done = False


class CompensationStrategy(BaseStrategy):
    """
    –£–ú–ù–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∏ —Ä–µ–∞–∫—Ü–∏—è"
    
    –û—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ç–∏–≤: BTC; —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: ETH
    –í—Ö–æ–¥ –≤ BTC –ø–æ –ª–æ–≥–∏–∫–µ –Ω–æ–≤–∏—á–∫–∞, —É–º–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —á–µ—Ä–µ–∑ ETH –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏
    """
    
    def __init__(self, params: StrategyParameters):
        self.params = params
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è BTC (–ª–æ–≥–∏–∫–∞ –Ω–æ–≤–∏—á–∫–∞)
        self.ema_fast = self.params.get_int("ema_fast", 10)
        self.ema_slow = self.params.get_int("ema_slow", 30)
        self.trend_threshold = self.params.get_float("trend_threshold", 0.001)
        self.btc_risk_pct = self.params.get_float("btc_deposit_prct", 0.05)
        self.btc_stop_loss_pct = self.params.get_float("btc_stop_loss_pct", 0.012)
        self.btc_take_profit_pct = self.params.get_float("btc_take_profit_pct", 0.03)
        self.btc_leverage = self.params.get_int("btc_leverage", 10)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ETH (–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è)
        self.eth_risk_pct = self.params.get_float("eth_deposit_prct", 0.1)
        self.eth_stop_loss_pct = self.params.get_float("eth_stop_loss_pct", 0.01)
        self.eth_take_profit_pct = self.params.get_float("eth_take_profit_pct", 0.015)
        self.eth_leverage = self.params.get_int("eth_leverage", 10)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        self.compensation_threshold = self.params.get_float("compensation_threshold", 0.005)  # 0.5%
        self.compensation_delay_candles = self.params.get_int("compensation_delay_candles", 3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–µ–π
        self.impulse_threshold = self.params.get_float("impulse_threshold", 0.004)  # 0.4%
        self.candles_against_threshold = self.params.get_int("candles_against_threshold", 2)

        self.trailing_stop_pct = self.params.get_float("trailing_stop_pct", 0.003)  # 0.3%

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        print("üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        print(f"   BTC Stop Loss: {self.btc_stop_loss_pct:.4f} ({self.btc_stop_loss_pct*100:.2f}%)")
        print(f"   BTC Take Profit: {self.btc_take_profit_pct:.4f} ({self.btc_take_profit_pct*100:.2f}%)")
        print(f"   BTC Risk %: {self.btc_risk_pct:.4f} ({self.btc_risk_pct*100:.2f}%)")
        print(f"   ETH Stop Loss: {self.eth_stop_loss_pct:.4f} ({self.eth_stop_loss_pct*100:.2f}%)")
        print(f"   ETH Take Profit: {self.eth_take_profit_pct:.4f} ({self.eth_take_profit_pct*100:.2f}%)")
        print(f"   Compensation Threshold: {self.compensation_threshold:.4f} ({self.compensation_threshold*100:.2f}%)")

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.state = CompensationState()

    def generate_signal(self, df: pd.DataFrame) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è BTC –ø–æ –ª–æ–≥–∏–∫–µ –Ω–æ–≤–∏—á–∫–∞"""
        if len(df) < self.ema_slow:
            return 'hold'

        ema_fast = df['close'].ewm(span=self.ema_fast).mean()
        ema_slow = df['close'].ewm(span=self.ema_slow).mean()

        diff = abs(ema_fast.iloc[-1] - ema_slow.iloc[-1]) / ema_slow.iloc[-1]
        if diff < self.trend_threshold:
            return 'hold'

        return 'long' if ema_fast.iloc[-1] > ema_slow.iloc[-1] else 'short'

    def calculate_position_size(self, balance: float, symbol: str = "BTC") -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è BTC –∏–ª–∏ ETH"""
        if symbol == "BTC":
            return balance * self.btc_risk_pct
        else:  # ETH
            return balance * self.eth_risk_pct
    
    def calculate_stop_loss_price(self, entry_price: float, side: str, symbol: str = "BTC") -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è BTC –∏–ª–∏ ETH"""
        if symbol == "BTC":
            stop_loss_pct = self.btc_stop_loss_pct
        else:  # ETH
            stop_loss_pct = self.eth_stop_loss_pct
            
        if side == "BUY":
            return entry_price * (1 - stop_loss_pct)
        else:  # SELL
            return entry_price * (1 + stop_loss_pct)

    def calculate_take_profit_price(self, entry_price: float, side: str, symbol: str = "BTC") -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è BTC –∏–ª–∏ ETH"""
        if symbol == "BTC":
            take_profit_pct = self.btc_take_profit_pct
        else:  # ETH
            take_profit_pct = self.eth_take_profit_pct
            
        if side == "BUY":
            return entry_price * (1 + take_profit_pct)
        else:  # SELL
            return entry_price * (1 - take_profit_pct)

    def should_trigger_compensation(self, btc_df: pd.DataFrame, current_price: float, current_time: datetime) -> bool:
        """
        –£–ú–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        """
        if not self.state.btc_entry_price:
            return False

        if self.state.btc_deal_id is None:
            return False

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        price_change_pct = abs(current_price - self.state.btc_entry_price) / self.state.btc_entry_price
        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ BTC:")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${self.state.btc_entry_price:.2f}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change_pct*100:.2f}%")
        print(f"   –ü–æ—Ä–æ–≥ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: {self.compensation_threshold*100:.2f}%")
        print(f"   BTC —Å—Ç–æ—Ä–æ–Ω–∞: {self.state.btc_side}")
            

        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏
        price_change_pct = abs(current_price - self.state.btc_entry_price) / self.state.btc_entry_price
        
        # –£–ü–†–û–©–ï–ù–ù–´–ô –ü–û–†–û–ì: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–π
        print(f"   –ü–æ—Ä–æ–≥ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏: {self.compensation_threshold*100:.2f}%")
        if price_change_pct < self.compensation_threshold:
            print(f"   ‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ {price_change_pct*100:.2f}% –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ {self.compensation_threshold*100:.2f}%")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if self.state.btc_side == "BUY" and current_price < self.state.btc_entry_price:
            movement_against = True
            print("   ‚úÖ BUY –ø–æ–∑–∏—Ü–∏—è –¥–≤–∏–∂–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤ (—Ü–µ–Ω–∞ –Ω–∏–∂–µ –≤—Ö–æ–¥–∞)")
        elif self.state.btc_side == "SELL" and current_price > self.state.btc_entry_price:
            movement_against = True
            print("   ‚úÖ SELL –ø–æ–∑–∏—Ü–∏—è –¥–≤–∏–∂–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤ (—Ü–µ–Ω–∞ –≤—ã—à–µ –≤—Ö–æ–¥–∞)")
        else:
            movement_against = False
            print(f"   ‚ùå –î–≤–∏–∂–µ–Ω–∏–µ –ù–ï –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏ (BTC {self.state.btc_side}, —Ü–µ–Ω–∞ {'–Ω–∏–∂–µ' if current_price < self.state.btc_entry_price else '–≤—ã—à–µ'} –≤—Ö–æ–¥–∞)")

        if not movement_against:
            return False
        
        # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Å–∏–≥–Ω–∞–ª, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è
        if self.state.compensation_signal_time is None:
            self.state.compensation_signal_time = current_time
            return False  # –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, –∂–¥–µ–º
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ (–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–≤–µ—á–∞—Ö)
        time_since_signal = current_time - self.state.compensation_signal_time
        candles_passed = time_since_signal.total_seconds() / 60  # 1 –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
        
        if candles_passed < self.compensation_delay_candles:
            return False  # –ï—â–µ –Ω–µ –≤—Ä–µ–º—è
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—á–∏ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏
        self._update_candles_analysis(btc_df)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø—É–ª—å—Å
        self._check_impulse(btc_df)
        
        # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å 2 —Å–≤–µ—á–∏ –ø—Ä–æ—Ç–∏–≤ –∏–ª–∏ –∏–º–ø—É–ª—å—Å >0.4%
        return (self.state.btc_candles_against >= self.candles_against_threshold or 
                self.state.btc_impulse_detected)

    def get_compensation_quality_score(self, btc_df: pd.DataFrame, eth_df: pd.DataFrame) -> Dict[str, float]:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        if len(btc_df) < 20 or len(eth_df) < 20:
            return {"volume_ok": False, "correlation_ok": False, "eth_direction_ok": False, "score": 0.0}
        
        # –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ BTC –∏ ETH –≤ –æ–¥–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        btc_last_time = btc_df.index[-1]  # timestamp —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å
        eth_last_time = eth_df.index[-1]  # timestamp —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å
        
        # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1 –º–∏–Ω—É—Ç—É
        time_diff = abs((btc_last_time - eth_last_time).total_seconds())
        if time_diff > 60:
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ BTC/ETH: {time_diff:.0f} —Å–µ–∫")
            return {"volume_ok": False, "correlation_ok": False, "eth_direction_ok": False, "score": 0.0}
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: –±–µ—Ä–µ–º –æ–±—ä–µ–º—ã –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –≤ —Ç–æ–º –∂–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        btc_current_time = btc_df.index[-1]  # timestamp —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å
        
        # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å ETH —Å–≤–µ—á–∏ —Å –±–ª–∏–∂–∞–π—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É BTC
        eth_time_diff = abs(eth_df.index - btc_current_time)
        eth_current_idx = eth_time_diff.argmin()
        
        # –û–±—ä–µ–º BTC (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏ 20 —Å–≤–µ—á–µ–π)
        btc_volume_ratio = btc_df['volume'].iloc[-5:].mean() / btc_df['volume'].iloc[-20:].mean()
        
        # –û–±—ä–µ–º ETH –≤ —Ç–æ–º –∂–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if eth_current_idx >= 19:  # –ï—Å—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–≤–µ—á–µ–π –Ω–∞–∑–∞–¥
            eth_volume_ratio = eth_df['volume'].iloc[eth_current_idx-4:eth_current_idx+1].mean() / eth_df['volume'].iloc[eth_current_idx-19:eth_current_idx+1].mean()
        else:
            eth_volume_ratio = 1.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è BTC/ETH –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π –≤ —Ç–æ–º –∂–µ –≤—Ä–µ–º–µ–Ω–∏
        if len(btc_df) >= 10 and eth_current_idx >= 9:
            btc_prices = btc_df['close'].iloc[-10:].values
            eth_prices = eth_df['close'].iloc[eth_current_idx-9:eth_current_idx+1].values
            correlation = pd.Series(btc_prices).corr(pd.Series(eth_prices))
        else:
            correlation = 0.8  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –£–õ–£–ß–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–æ–π—á–∏–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è ETH (–°–¢–†–û–ì–ò–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
        eth_direction_ok = False
        if len(eth_df) >= 5:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            eth_side = self.get_eth_side()
            
            # –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –°–í–ï–ß–ï–ô: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–≤–µ—á–∏
            btc_current_time = btc_df.index[-1]  # timestamp —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å
            eth_current_time = eth_df.index[-1]  # timestamp —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å
            
            # –ï—Å–ª–∏ ETH –æ—Ç—Å—Ç–∞–µ—Ç –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2 –º–∏–Ω—É—Ç—ã - –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            if abs((btc_current_time - eth_current_time).total_seconds()) > 120:
                print(f"‚ö†Ô∏è ETH –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç BTC –Ω–∞ {(btc_current_time - eth_current_time).total_seconds():.0f} —Å–µ–∫")
                return {
                    "volume_ok": volume_ok,
                    "correlation_ok": correlation_ok,
                    "eth_direction_ok": False,
                    "btc_volume_ratio": btc_volume_ratio,
                    "eth_volume_ratio": eth_volume_ratio,
                    "correlation": correlation,
                    "score": 0.0
                }
            
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: –±–µ—Ä–µ–º ETH —Å–≤–µ—á–∏ –≤ —Ç–æ–º –∂–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —á—Ç–æ –∏ BTC
            btc_current_time = btc_df.index[-1]  # timestamp —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å
            
            # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å ETH —Å–≤–µ—á–∏ —Å –±–ª–∏–∂–∞–π—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É BTC
            eth_time_diff = abs(eth_df.index - btc_current_time)
            eth_current_idx = eth_time_diff.argmin()
            
            # –ë–µ—Ä–µ–º 5 —Å–≤–µ—á–µ–π ETH –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∫ —É BTC)
            if eth_current_idx >= 4:  # –ï—Å—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–≤–µ—á–µ–π –Ω–∞–∑–∞–¥
                eth_prices = eth_df['close'].iloc[eth_current_idx-4:eth_current_idx+1].values
                eth_volumes = eth_df['volume'].iloc[eth_current_idx-2:eth_current_idx+1].values
                print(f"üìä ETH –∞–Ω–∞–ª–∏–∑: —Å–≤–µ—á–∏ {eth_current_idx-4} –¥–æ {eth_current_idx} (–≤—Ä–µ–º—è BTC: {btc_current_time})")
            else:
                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π - –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
                eth_prices = eth_df['close'].iloc[:eth_current_idx+1].values
                eth_volumes = eth_df['volume'].iloc[:eth_current_idx+1].values
                print(f"‚ö†Ô∏è ETH –∞–Ω–∞–ª–∏–∑: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º {len(eth_prices)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            
            if eth_side == "BUY":
                # –î–ª—è –ª–æ–Ω–≥–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ETH —Ä–∞—Å—Ç–µ—Ç (–°–ù–ò–ñ–ï–ù–´ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
                price_trend = eth_prices[4] > eth_prices[0]  # –ü—Ä–æ—Å—Ç–æ–π —Ä–æ—Å—Ç
                volume_confirmation = eth_volumes[2] > eth_volumes[0] * 0.5  # –°–Ω–∏–∂–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä–µ–º—É
                if price_trend and volume_confirmation:
                    eth_direction_ok = True
            elif eth_side == "SELL":
                # –î–ª—è —à–æ—Ä—Ç–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ETH –ø–∞–¥–∞–µ—Ç (–°–ù–ò–ñ–ï–ù–´ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
                price_trend = eth_prices[4] < eth_prices[0]  # –ü—Ä–æ—Å—Ç–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                volume_confirmation = eth_volumes[2] > eth_volumes[0] * 0.5  # –°–Ω–∏–∂–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä–µ–º—É
                if price_trend and volume_confirmation:
                    eth_direction_ok = True
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (–°–ù–ò–ñ–ï–ù–´ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–π)
        volume_ok = btc_volume_ratio > 0.5 and eth_volume_ratio > 0.5  # –°–Ω–∏–∂–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä–µ–º—É
        correlation_ok = correlation > 0.2  # –°–Ω–∏–∂–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        
        # –û–±—â–∏–π —Å–∫–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ (0-100) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ETH
        quality_score = 0.0
        if volume_ok:
            quality_score += 25
        if correlation_ok:
            quality_score += 25
        if eth_direction_ok:
            quality_score += 50  # –£–í–ï–õ–ò–ß–ï–ù –≤–µ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ETH (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
        if btc_volume_ratio > 1.2:
            quality_score += 10
        if eth_volume_ratio > 1.2:
            quality_score += 10
        
        return {
            "volume_ok": volume_ok,
            "correlation_ok": correlation_ok,
            "eth_direction_ok": eth_direction_ok,
            "btc_volume_ratio": btc_volume_ratio,
            "eth_volume_ratio": eth_volume_ratio,
            "correlation": correlation,
            "score": quality_score
        }

    def get_compensation_size_multiplier(self, price_change_pct: float) -> float:
        """
        –£–ú–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞–∑–º–µ—Ä–∞ ETH –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è
        (–°–¥–µ–ª–∞–Ω–æ –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —É–±—ã—Ç–∫–æ–≤)
        """
        if price_change_pct > 0.005:  # 0.5% - —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤
            return 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä ETH –Ω–∞ 20% (–±—ã–ª–æ 50%)
        elif price_change_pct > 0.003:  # 0.3% - —Å—Ä–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            return 1.1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä ETH –Ω–∞ 10% (–±—ã–ª–æ 20%)
        else:
            return 0.8  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ 20% (–±—ã–ª–æ 100%)

    def should_partial_close_btc(self, btc_pnl: float, eth_pnl: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—å BTC –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        """
        # –ï—Å–ª–∏ ETH –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç —É–±—ã—Ç–æ–∫ BTC –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 50%
        return eth_pnl > 0 and abs(eth_pnl) > abs(btc_pnl) * 0.5

    def should_close_both_positions(self, btc_pnl: float, eth_pnl: float) -> bool:
        """
        –ó–ê–©–ò–¢–ê –û–¢ –î–í–û–ô–ù–û–ì–û –£–ë–´–¢–ö–ê: –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –æ–±–µ –≤ —É–±—ã—Ç–∫–µ
        """
        # –ï—Å–ª–∏ –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —É–±—ã—Ç–∫–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–±–µ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å
        return btc_pnl < 0 and eth_pnl < 0

    def create_compensation_position(self, current_eth_price: float, current_time: datetime, 
                                   price_change_pct: float, balance: float) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ETH —Å —É–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        eth_side = self.get_eth_side()
        size_multiplier = self.get_compensation_size_multiplier(price_change_pct)
        
        position = {
            'entry_time': current_time,
            'entry_price': current_eth_price,
            'side': eth_side,
            'size': balance * self.eth_risk_pct * size_multiplier,
            'leverage': self.eth_leverage,
            'stop_loss': self.calculate_stop_loss_price(current_eth_price, eth_side, 'ETH'),
            'take_profit': self.calculate_take_profit_price(current_eth_price, eth_side, 'ETH'),
            'trailing_stop': self.calculate_stop_loss_price(current_eth_price, eth_side, 'ETH'),
            'size_multiplier': size_multiplier
        }
        
        return position

    def update_trailing_stop(self, position: Dict, current_price: float) -> float:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç trailing stop –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
        if position['side'] == 'BUY':
            # –î–ª—è –ª–æ–Ω–≥–∞: trailing stop –¥–≤–∏–≥–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö –∑–∞ —Ü–µ–Ω–æ–π
            new_stop = current_price * (1 - self.trailing_stop_pct)
            return max(position.get('trailing_stop', position['stop_loss']), new_stop)
        else:  # SELL
            # –î–ª—è —à–æ—Ä—Ç–∞: trailing stop –¥–≤–∏–≥–∞–µ—Ç—Å—è –≤–Ω–∏–∑ –∑–∞ —Ü–µ–Ω–æ–π
            new_stop = current_price * (1 + self.trailing_stop_pct)
            return min(position.get('trailing_stop', position['stop_loss']), new_stop)

    def _update_candles_analysis(self, df: pd.DataFrame) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–µ—á–∏ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏"""
        if len(df) < 3 or not self.state.btc_side:
            return
            
        candles_against = 0
        for i in range(len(df) - 2, len(df)):
            candle = df.iloc[i]
            prev_candle = df.iloc[i-1] if i > 0 else candle
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–∏
            if candle['close'] > candle['open']:  # –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞
                candle_direction = "up"
            else:  # –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞
                candle_direction = "down"
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–≤–µ—á–∞ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏
            if self.state.btc_side == "BUY" and candle_direction == "down":
                candles_against += 1
            elif self.state.btc_side == "SELL" and candle_direction == "up":
                candles_against += 1
                
        self.state.btc_candles_against = candles_against

    def _check_impulse(self, df: pd.DataFrame) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–º–ø—É–ª—å—Å–∞ >0.4%"""
        if len(df) < 2 or not self.state.btc_side:
            return
            
        current_candle = df.iloc[-1]
        prev_candle = df.iloc[-2]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        price_change_pct = abs(current_candle['close'] - prev_candle['close']) / prev_candle['close']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞
        if self.state.btc_side == "BUY" and current_candle['close'] < prev_candle['close']:
            # –ò–º–ø—É–ª—å—Å –≤–Ω–∏–∑ –ø—Ä–æ—Ç–∏–≤ –ª–æ–Ω–≥–∞
            if price_change_pct > self.impulse_threshold:
                self.state.btc_impulse_detected = True
        elif self.state.btc_side == "SELL" and current_candle['close'] > prev_candle['close']:
            # –ò–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö –ø—Ä–æ—Ç–∏–≤ —à–æ—Ä—Ç–∞
            if price_change_pct > self.impulse_threshold:
                self.state.btc_impulse_detected = True

    def should_close_btc_position(self, btc_df: pd.DataFrame, current_time: datetime) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é BTC (–í–°–ï –£–°–õ–û–í–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω—É–∂–Ω–æ_–∑–∞–∫—Ä—ã—Ç—å, –ø—Ä–∏—á–∏–Ω–∞)
        """
        print(f"üîç –í—ã–∑–≤–∞–Ω should_close_btc_position: deal_id={self.state.btc_deal_id}, entry_price={self.state.btc_entry_price}")

        if not self.state.btc_entry_price:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏–∏ BTC (–Ω–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞)")
            return False, ""

        if self.state.btc_deal_id is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏–∏ BTC (deal_id is None)")
            return False, ""

        current_btc_price = btc_df['close'].iloc[-1]

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        btc_position = {
            'side': self.state.btc_side,
            'take_profit': self.calculate_take_profit_price(self.state.btc_entry_price, self.state.btc_side, 'BTC'),
            'stop_loss': self.calculate_stop_loss_price(self.state.btc_entry_price, self.state.btc_side, 'BTC'),
            'trailing_stop': self.calculate_stop_loss_price(self.state.btc_entry_price, self.state.btc_side, 'BTC'),
            'entry_time': self.state.btc_entry_time
        }

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è BTC –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${current_btc_price:.2f}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${self.state.btc_entry_price:.2f}")
        print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {btc_position['side']}")
        print(f"   Take Profit: ${btc_position['take_profit']:.2f}")
        print(f"   Stop Loss: ${btc_position['stop_loss']:.2f}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {(current_btc_price - self.state.btc_entry_price) / self.state.btc_entry_price * 100:.2f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        if (btc_position['side'] == 'BUY' and current_btc_price >= btc_position['take_profit']) or \
           (btc_position['side'] == 'SELL' and current_btc_price <= btc_position['take_profit']):
            print(f"üéØ –¢–ï–ô–ö-–ü–†–û–§–ò–¢! –¶–µ–Ω–∞ {current_btc_price} {'–≤—ã—à–µ' if btc_position['side'] == 'BUY' else '–Ω–∏–∂–µ'} —É—Ä–æ–≤–Ω—è {btc_position['take_profit']}")
            return True, "take_profit"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º trailing stop
        if (btc_position['side'] == 'BUY' and current_btc_price <= btc_position['trailing_stop']) or \
           (btc_position['side'] == 'SELL' and current_btc_price >= btc_position['trailing_stop']):
            return True, "trailing_stop"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        if (btc_position['side'] == 'BUY' and current_btc_price <= btc_position['stop_loss']) or \
           (btc_position['side'] == 'SELL' and current_btc_price >= btc_position['stop_loss']):
            print(f"üõë –°–¢–û–ü-–õ–û–°–°! –¶–µ–Ω–∞ {current_btc_price} {'–Ω–∏–∂–µ' if btc_position['side'] == 'BUY' else '–≤—ã—à–µ'} —É—Ä–æ–≤–Ω—è {btc_position['stop_loss']}")
            return True, "stop_loss"
        
        # –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è BTC
        if self.state.btc_entry_price and self.state.btc_entry_time:
            # –î–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π trailing stop –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            if self.state.btc_side == 'BUY':
                trailing_stop = current_btc_price * (1 - self.trailing_stop_pct)
            else:
                trailing_stop = current_btc_price * (1 + self.trailing_stop_pct)
            if (btc_position['side'] == 'BUY' and current_btc_price <= trailing_stop) or \
               (btc_position['side'] == 'SELL' and current_btc_price >= trailing_stop):
                print(f"üìà –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü BTC! –¶–µ–Ω–∞ {current_btc_price:.2f} –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è {trailing_stop:.2f}")
                return True, "trailing_stop"
                
        return False, ""

    def should_close_eth_position(self, eth_df: pd.DataFrame, current_time: datetime) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é ETH (–í–°–ï –£–°–õ–û–í–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω—É–∂–Ω–æ_–∑–∞–∫—Ä—ã—Ç—å, –ø—Ä–∏—á–∏–Ω–∞)
        """
        if self.state.eth_deal_id is None:
            return False, ""

        current_eth_price = eth_df['close'].iloc[-1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É ETH (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è BTC)
        eth_side = self.get_eth_side()

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–£–Æ –õ–û–ì–ò–ö–£: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¶–ï–ù–´ –í–•–û–î–ê –≤ ETH –ø–æ–∑–∏—Ü–∏—é
        # –î–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ - –±–µ—Ä–µ–º –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
        if hasattr(self.state, 'eth_entry_price') and self.state.eth_entry_price:
            eth_entry_price = self.state.eth_entry_price
        else:
            # –î–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
            eth_entry_price = current_eth_price  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
        take_profit_price = self.calculate_take_profit_price(eth_entry_price, eth_side, 'ETH')
        stop_loss_price = self.calculate_stop_loss_price(eth_entry_price, eth_side, 'ETH')

        print(f"üîç DEBUG: ETH Close Check | Side: {eth_side} | Entry: {eth_entry_price:.2f} | Current: {current_eth_price:.2f}")
        print(f"üîç DEBUG: ETH Levels | TP: {take_profit_price:.2f} | SL: {stop_loss_price:.2f}")

        if (eth_side == 'BUY' and current_eth_price >= take_profit_price) or \
           (eth_side == 'SELL' and current_eth_price <= take_profit_price):
            print(f"üéØ ETH TAKE-PROFIT! –¶–µ–Ω–∞ {current_eth_price:.2f} –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è {take_profit_price:.2f}")
            return True, "take_profit"

        if (eth_side == 'BUY' and current_eth_price <= stop_loss_price) or \
           (eth_side == 'SELL' and current_eth_price >= stop_loss_price):
            print(f"üõë ETH STOP-LOSS! –¶–µ–Ω–∞ {current_eth_price:.2f} –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è {stop_loss_price:.2f}")
            return True, "stop_loss"

        if eth_side == 'BUY':
            trailing_stop = current_eth_price * (1 - self.trailing_stop_pct)
        else:
            trailing_stop = current_eth_price * (1 + self.trailing_stop_pct)

        if (eth_side == 'BUY' and current_eth_price <= trailing_stop) or \
           (eth_side == 'SELL' and current_eth_price >= trailing_stop):
            print(f"üìà ETH TRAILING-STOP! –¶–µ–Ω–∞ {current_eth_price:.2f} –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è {trailing_stop:.2f}")
            return True, "trailing_stop"

        if self.state.eth_entry_time:
            emergency_close, emergency_reason = self.should_emergency_close_eth(0, self.state.eth_entry_time, current_time)
            if emergency_close:
                print(f"üö® ETH EMERGENCY CLOSE! {emergency_reason}")
                return True, emergency_reason

        return False, ""



    def get_eth_side(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è ETH (–ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø - –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç BTC)"""
        if self.state.btc_side == "BUY":
            return "SELL"
        else:
            return "BUY"


    def update_state(self, btc_deal_id: Optional[int] = None,
                    eth_deal_id: Optional[int] = None,
                    btc_entry_price: Optional[float] = None,
                    btc_entry_time: Optional[datetime] = None,
                    btc_side: Optional[str] = None,
                    eth_entry_price: Optional[float] = None,
                    eth_entry_time: Optional[datetime] = None,
                    compensation_triggered: bool = False) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if btc_deal_id is not None:
            self.state.btc_deal_id = btc_deal_id
        if eth_deal_id is not None:
            self.state.eth_deal_id = eth_deal_id
        if btc_entry_price is not None:
            self.state.btc_entry_price = btc_entry_price
        if btc_entry_time is not None:
            self.state.btc_entry_time = btc_entry_time
        if btc_side is not None:
            self.state.btc_side = btc_side
        if eth_entry_price is not None:
            self.state.eth_entry_price = eth_entry_price
        if eth_entry_time is not None:
            self.state.eth_entry_time = eth_entry_time
        if compensation_triggered:
            self.state.compensation_triggered = True
            self.state.compensation_time = datetime.now()

    def reset_state(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.state = CompensationState()

    def should_close_both_positions(self, btc_pnl: float, eth_pnl: float) -> bool:
        """
        –ó–ê–©–ò–¢–ê –û–¢ –î–í–û–ô–ù–û–ì–û –£–ë–´–¢–ö–ê: –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –æ–±–µ –≤ —É–±—ã—Ç–∫–µ
        """

        return btc_pnl < 0 and eth_pnl < 0

    def should_emergency_close_eth(self, eth_pnl: float, eth_entry_time: datetime, current_time: datetime) -> Tuple[bool, str]:
        """
        –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï ETH: –µ—Å–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
        """
        time_in_trade = (current_time - eth_entry_time).total_seconds() / 60
        should_close = eth_pnl < 0 and time_in_trade > 30
        reason = f'emergency_close_after_{time_in_trade:.1f}_minutes' if should_close else ''
        return should_close, reason

    def check_compensation_management(self, btc_pnl: float, eth_pnl: float, current_time: datetime) -> Dict[str, any]:
        """
        –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ï–ô: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ—à–µ–Ω–∏—è–º–∏
        """
        result = {
            'close_both': False,
            'emergency_close_eth': False,
            'partial_close_btc': False,
            'reason': ''
        }
        
        if self.should_close_both_positions(btc_pnl, eth_pnl):
            result['close_both'] = True
            result['reason'] = 'double_loss_protection'
            return result
        
        if self.state.eth_entry_time:
            emergency_close, emergency_reason = self.should_emergency_close_eth(eth_pnl, self.state.eth_entry_time, current_time)
            if emergency_close:
                result['emergency_close_eth'] = True
                result['reason'] = emergency_reason
                return result
        
        if self.should_partial_close_btc(btc_pnl, eth_pnl):
            result['partial_close_btc'] = True
            result['reason'] = 'successful_compensation'
        
        return result

    def calculate_pnl(self, position: Dict, current_price: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç PnL –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
        """
        if not position:
            return 0.0
        
        entry_price = position['entry_price']
        size = position['size']
        leverage = position.get('leverage', 1)
        
        if position['side'] == 'BUY':
            # –î–ª—è –ª–æ–Ω–≥–∞: (—Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞ - —Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞) / —Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞ * —Ä–∞–∑–º–µ—Ä * –ø–ª–µ—á–æ
            price_change_pct = (current_price - entry_price) / entry_price
        else:  # SELL
            # –î–ª—è —à–æ—Ä—Ç–∞: (—Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞ - —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞) / —Ü–µ–Ω–∞_–≤—Ö–æ–¥–∞ * —Ä–∞–∑–º–µ—Ä * –ø–ª–µ—á–æ
            price_change_pct = (entry_price - current_price) / entry_price
        
        return size * price_change_pct * leverage
