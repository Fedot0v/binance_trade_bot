import os
from datetime import datetime, timedelta

from fastapi import APIRouter, Request, Form, UploadFile, File, Depends, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from services.user_strategy_template_service import UserStrategyTemplateService
from services.deal_service import DealService
from services.strategy_config_service import StrategyConfigService
from schemas.user_strategy_template import UserStrategyTemplateRead
from models.user_model import Symbols
from app.tasks.backtest_tasks import run_backtest_task # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É Celery –∑–∞–¥–∞—á—É

from dependencies.user_dependencies import fastapi_users
from dependencies.di_factories import get_user_strategy_template_service, get_backtest_service, get_deal_service, get_strategy_service


router = APIRouter()
templates = Jinja2Templates(directory="app/templates")
current_active_user = fastapi_users.current_user(active=True)


@router.get("/backtest/run/", response_class=HTMLResponse)
async def backtest_form(
    request: Request,
    current_user=Depends(current_active_user),
    user_strategy_template_service: UserStrategyTemplateService = Depends(
        get_user_strategy_template_service
    ),
    # backtest_service: BacktestService = Depends(get_backtest_service), # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
    strategy_config_service: StrategyConfigService = Depends(get_strategy_service)
):
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    templates_list = await user_strategy_template_service.get_all(
        current_user.id
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π
    strategy_configs = await strategy_config_service.get_active()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ enum
    symbols_list = [symbol.value for symbol in Symbols]

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è JavaScript
    templates_with_params = []
    for template in templates_list:
        template_data = {
            "id": template.id,
            "template_name": template.template_name,
            "description": getattr(template, 'description', ''),
            "strategy_config_id": template.strategy_config_id,
            "parameters": template.parameters if hasattr(template, 'parameters') and template.parameters else {}
        }
        templates_with_params.append(template_data)

    return templates.TemplateResponse(
        "backtest/run.html",
        {
            "request": request,
            "templates": templates_list,
            "templates_data": templates_with_params,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            "strategy_configs": strategy_configs,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            "symbols": symbols_list,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —Å–∏–º–≤–æ–ª–æ–≤
            "strategies": [],  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            "result": None,
            "current_user": current_user
        }
    )



@router.post("/backtest/run/", response_class=HTMLResponse)
async def backtest_run(
    request: Request,
    template_id: str = Form(...),  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ str –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    symbol: str = Form(default="BTCUSDT"),
    start_date: str = Form(default=None),
    end_date: str = Form(default=None),
    initial_balance: float = Form(default=10000.0),

    current_user=Depends(current_active_user),
    user_strategy_template_service: UserStrategyTemplateService = Depends(
        get_user_strategy_template_service
    ),
    deal_service: DealService = Depends(get_deal_service),
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
    custom_param_ema_fast: str = Form(default=None),
    custom_param_ema_slow: str = Form(default=None),
    custom_param_trend_threshold: str = Form(default=None),
    custom_param_deposit_prct: str = Form(default=None),
    custom_param_stop_loss_pct: str = Form(default=None),
    custom_param_take_profit_pct: str = Form(default=None),
    custom_param_btc_deposit_prct: str = Form(default=None),
    custom_param_eth_deposit_prct: str = Form(default=None),
    custom_param_btc_stop_loss_pct: str = Form(default=None),
    custom_param_eth_stop_loss_pct: str = Form(default=None),
    custom_param_trailing_stop_pct: str = Form(default=None),
    custom_param_impulse_threshold: str = Form(default=None),
    custom_param_candles_against_threshold: str = Form(default=None),
    custom_param_max_trade_duration: str = Form(default=None),
):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            template_id_int = int(template_id)
        except ValueError:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞: {template_id}")
        
        template = await user_strategy_template_service.get_by_id(template_id_int, current_user.id)
        if not template:
            raise ValueError(f"–®–∞–±–ª–æ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º—ã
        custom_params = {}
        if custom_param_ema_fast: custom_params['ema_fast'] = custom_param_ema_fast
        if custom_param_ema_slow: custom_params['ema_slow'] = custom_param_ema_slow
        if custom_param_trend_threshold: custom_params['trend_threshold'] = custom_param_trend_threshold
        if custom_param_deposit_prct: custom_params['deposit_prct'] = custom_param_deposit_prct
        if custom_param_stop_loss_pct: custom_params['stop_loss_pct'] = custom_param_stop_loss_pct
        if custom_param_take_profit_pct: custom_params['take_profit_pct'] = custom_param_take_profit_pct
        if custom_param_btc_deposit_prct: custom_params['btc_deposit_prct'] = custom_param_btc_deposit_prct
        if custom_param_eth_deposit_prct: custom_params['eth_deposit_prct'] = custom_param_eth_deposit_prct
        if custom_param_btc_stop_loss_pct: custom_params['btc_stop_loss_pct'] = custom_param_btc_stop_loss_pct
        if custom_param_eth_stop_loss_pct: custom_params['eth_stop_loss_pct'] = custom_param_eth_stop_loss_pct
        if custom_param_trailing_stop_pct: custom_params['trailing_stop_pct'] = custom_param_trailing_stop_pct
        if custom_param_impulse_threshold: custom_params['impulse_threshold'] = custom_param_impulse_threshold
        if custom_param_candles_against_threshold: custom_params['candles_against_threshold'] = custom_param_candles_against_threshold
        if custom_param_max_trade_duration: custom_params['max_trade_duration'] = custom_param_max_trade_duration

        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if custom_params:
            print(f"üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {custom_params}")
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            from types import SimpleNamespace
            modified_template = SimpleNamespace()
            modified_template.id = template.id
            modified_template.template_name = template.template_name
            modified_template.description = template.description
            modified_template.symbol = template.symbol
            modified_template.interval = template.interval
            # –ü–æ–ª—É—á–∞–µ–º leverage –∏–∑ —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ None - –∏—Å–ø–æ–ª—å–∑—É–µ–º 1
            leverage_value = getattr(template, 'leverage', None)
            if leverage_value is None:
                leverage_value = 1
            modified_template.leverage = leverage_value
            modified_template.strategy_config_id = template.strategy_config_id
            modified_template.user_id = template.user_id

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏
            original_params = template.parameters or {}
            modified_template.parameters = {**original_params, **custom_params}
            template = modified_template
            print(f"‚úÖ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤: {modified_template.parameters}")

        templates_list = await user_strategy_template_service.get_all(current_user.id)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç–∞
        if not start_date or not end_date:
            raise ValueError("–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω—ã –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        interval = template.interval or "1m"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç
        print(f"üéØ –ó–∞–ø—É—Å–∫ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template.template_name} (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ Celery –∑–∞–¥–∞—á–∞)")
        print(f"  üìä Strategy Config ID: {template.strategy_config_id}")
        print(f"  üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        print(f"  üí∞ –ë–∞–ª–∞–Ω—Å: ${initial_balance}")

        # LegacyBacktestService –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Celery –∑–∞–¥–∞—á—É
        # legacy_service = LegacyBacktestService()

        compensation_strategy_flag = False
        if template.strategy_config_id == 2:  # ID –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            compensation_strategy_flag = True
            # –î–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Å–∏–º–≤–æ–ª–∞
            btc_open_deal = await deal_service.get_open_deal_for_user_and_symbol(
                current_user.id, "BTCUSDT"
            )
            eth_open_deal = await deal_service.get_open_deal_for_user_and_symbol(
                current_user.id, "ETHUSDT"
            )

            print(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫:")
            print(f"    BTC: {'–ï—Å—Ç—å' if btc_open_deal else '–ù–µ—Ç'}")
            print(f"    ETH: {'–ï—Å—Ç—å' if eth_open_deal else '–ù–µ—Ç'}")

            if btc_open_deal:
                raise ValueError("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ BTCUSDT")
            if eth_open_deal:
                raise ValueError("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ ETHUSDT")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª(—ã) –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Celery –∑–∞–¥–∞—á—É
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –ø–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ —Å–∏–º–≤–æ–ª–∞, –∏–Ω–∞—á–µ - —Å–∏–º–≤–æ–ª –∏–∑ —Ñ–æ—Ä–º—ã.
        task_symbols = ["BTCUSDT", "ETHUSDT"] if compensation_strategy_flag else symbol
        
        print(f"DEBUG_UI: Symbol from form: {symbol}")
        print(f"DEBUG_UI: task_symbols to Celery: {task_symbols}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Celery –∑–∞–¥–∞—á—É
        task = run_backtest_task.delay(
            user_id=str(current_user.id),
            template_id=template.id,
            symbol=task_symbols,
            start_date=start_date,
            end_date=end_date,
            initial_balance=initial_balance,
            leverage=getattr(template, 'leverage', None) or 1,
            strategy_config_id=template.strategy_config_id,
            compensation_strategy=compensation_strategy_flag,
            custom_params=custom_params
        )
        print(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ Celery –∑–∞–¥–∞—á–∞! ID –∑–∞–¥–∞—á–∏: {task.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        symbols_list = [symbol.value for symbol in Symbols]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è JavaScript
        templates_with_params = []
        for template_item in templates_list:
            template_data = {
                "id": template_item.id,
                "template_name": template_item.template_name,
                "description": getattr(template_item, 'description', ''),
                "strategy_config_id": template_item.strategy_config_id,
                "parameters": template_item.parameters if hasattr(template_item, 'parameters') and template_item.parameters else {}
            }
            templates_with_params.append(template_data)

        return templates.TemplateResponse(
            "backtest/run.html",
            {
                "request": request,
                "templates": templates_list,
                "templates_data": templates_with_params,
                "symbols": symbols_list,
                "strategies": [],
                "result": {"message": f"–ë—ç–∫—Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. ID –∑–∞–¥–∞—á–∏: {task.id}", "task_id": task.id},
                "current_user": current_user,
                "error": None
            }
        )
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        templates_list = await user_strategy_template_service.get_all(current_user.id)
        symbols_list = [symbol.value for symbol in Symbols]

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è JavaScript
        templates_with_params = []
        for template in templates_list:
            template_data = {
                "id": template.id,
                "template_name": template.template_name,
                "description": getattr(template, 'description', ''),
                "strategy_config_id": template.strategy_config_id,
                "parameters": template.parameters if hasattr(template, 'parameters') and template.parameters else {}
            }
            templates_with_params.append(template_data)

        return templates.TemplateResponse(
            "backtest/run.html",
            {
                "request": request,
                "templates": templates_list,
                "templates_data": templates_with_params,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                "symbols": symbols_list,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                "strategies": [],
                "result": None,
                "current_user": current_user,
                "error": str(e)
            }
        )