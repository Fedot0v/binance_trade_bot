from uuid import UUID
import asyncio

import pandas as pd

from clients.client_factory import ExchangeClientFactory
from strategies.base_strategy import BaseStrategy
from services.apikeys_service import APIKeysService
from services.deal_service import DealService
from services.marketdata_service import MarketDataService
from services.user_strategy_template_service import UserStrategyTemplateService
from services.strategy_log_service import StrategyLogService
from schemas.user_strategy_template import UserStrategyTemplateRead
from services.strategy_config_service import StrategyConfigService
from strategies.strategy_factory import make_strategy, get_strategy_class_by_name
from strategies.contracts import Decision, OrderIntent
from services.balance_service import BalanceService
from services.order_service import OrderService
from encryption.crypto import decrypt
from schemas.deal import DealCreate
from services.bot_service import UserBotService
from schemas.strategy_log import StrategyLogCreate
from services.strategy_parameters import StrategyParameters


TRAIL_PCT = 0.002


def _sym_str(x) -> str:
    return x.value if hasattr(x, "value") else str(x)


class TradeService:
    def __init__(
        self,
        deal_service: DealService,
        marketdata_service: MarketDataService,
        apikeys_service: APIKeysService,
        user_strategy_template_service: UserStrategyTemplateService,
        log_service: StrategyLogService,
        exchange_client_factory: ExchangeClientFactory,
        strategy_config_service: StrategyConfigService,
        balance_service: BalanceService,
        order_service: OrderService,
        userbot_service: UserBotService
    ):
        self.deal_service = deal_service
        self.marketdata_service = marketdata_service
        self.apikeys_service = apikeys_service
        self.user_strategy_template_service = user_strategy_template_service
        self.log_service = log_service
        self.exchange_client_factory = exchange_client_factory
        self.balance_service = balance_service
        self.order_service = order_service
        self.strategy_config_service = strategy_config_service
        self.userbot_service = userbot_service

    async def run_trading_cycle(
        self,
        bot_id,
        user_id,
        symbol,
        session=None
    ):
        print(f"=== START: Trading Cycle | bot_id={bot_id} user_id={user_id} symbol={symbol} ===")
        async with session.begin():
            if not await self._check_bot_and_deal(bot_id, user_id, symbol):
                print("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞")
                return

            print("–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–µ–π –∏ —à–∞–±–ª–æ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            api_key, api_secret, template = await self._get_keys_and_template(
                user_id
            )
            print(
                f"–ü–æ–ª—É—á–µ–Ω—ã –∫–ª—é—á–∏: api_key (—Å–∫—Ä—ã—Ç), \
                    api_secret (—Å–∫—Ä—ã—Ç), template: {template}"
            )
            if not api_key:
                print("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                return

            print("–®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            params = StrategyParameters(template.parameters)
            print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {params.as_dict()}")
            strategy_config = await self.strategy_config_service.get_by_id(
                template.strategy_config_id
            )
            print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {strategy_config}")

            print("–®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            df = await self._get_market_data(api_key, api_secret, template)
            print(f"–°–≤–µ—á–∏: {df.tail(3).to_dict('records')}")

            print("–®–∞–≥ 4: –†–µ—à–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            strategy = make_strategy(strategy_config.name, template)
            symbol_str = _sym_str(template.symbol)
            md = {symbol_str: df}
            decision = await strategy.decide(md, template, open_state={})

            print(f"Decision: intents={len(decision.intents)}, ttl={decision.bundle_ttl_sec}")
            if not decision.intents:
                print("–†–µ—à–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                return

            print("–®–∞–≥ 5: –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π")
            for intent in decision.intents:
                await self._execute_intent_from_decision(
                    user_id=user_id,
                    bot_id=bot_id,
                    template=template,
                    intent=intent,
                    md=md,
                    api_key=api_key,
                    api_secret=api_secret,
                    session=session,
                    strategy=strategy
                )

        print("=== END: Trading Cycle ===")

    async def _check_bot_and_deal(self, bot_id, user_id, symbol):
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ (user_id={user_id}, symbol={symbol}) –∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫")
        bot = await self.userbot_service.get_active_bot(user_id, symbol)
        print(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot.status if bot else '–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        if not bot:
            print("–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return False
        opened = await self.deal_service.get_open_deal_for_user_and_symbol(
            user_id,
            symbol
        )
        print(f"–ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ –ø–∞—Ä–µ? {'–î–∞' if opened else '–ù–µ—Ç'}")
        if opened:
            print("–û—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        return True

    async def _get_keys_and_template(self, user_id):
        apikeys = await self.apikeys_service.get_active(user_id)
        print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö API-–∫–ª—é—á–µ–π: {len(apikeys)}")
        if not apikeys:
            await self.log_service.add_log_user(user_id, "–ù–µ—Ç API –∫–ª—é—á–µ–π")
            return None, None, None

        api_key = apikeys[0].api_key_encrypted
        api_secret = decrypt(apikeys[0].api_secret_encrypted)
        template = (
            await self.user_strategy_template_service.get_active_strategie(
                user_id
            )
        )
        print(f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {template}")
        if not template:
            await self.log_service.add_log_user(
                user_id,
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
            )
            return None, None, None

        return api_key, api_secret, template

    async def _get_market_data(self, api_key, api_secret, template):
        print(f"–ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: symbol={template.symbol.value}, interval={template.interval.value}")
        klines = await self.marketdata_service.get_klines(
            api_key, api_secret,
            symbol=template.symbol.value,
            interval=template.interval.value,
            limit=500
        )
        df = pd.DataFrame(klines, columns=[
            'open_time', 'open', 'high', 'low', 'close', 'volume', 'close_time',
            'quote_asset_volume', 'number_of_trades', 'taker_buy_base',
            'taker_buy_quote', 'ignore'
        ])
        df['close'] = df['close'].astype(float)
        return df

    def _generate_signal(self, strategy_config, df):
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_config.name}")
        params = StrategyParameters(strategy_config.parameters)
        strat = get_strategy_class_by_name(strategy_config.name, params)
        signal = strat.generate_signal(df)
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {signal}")
        return signal

    async def _calculate_position(self, api_key, api_secret, template, df):
        balance_data = await self.balance_service.get_futures_balance(
            api_key,
            api_secret,
            asset="USDT"
        )
        balance = balance_data["available"]
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ API: {balance}")
        params = StrategyParameters(template.parameters)

        strategy_config = await self.strategy_config_service.get_by_id(
            template.strategy_config_id
        )
        strategy = get_strategy_class_by_name(strategy_config.name, params)

        print(f"üîç –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏: balance={balance}, strategy={strategy.__class__.__name__}")
        size = strategy.calculate_position_size(balance)
        price = df['close'].iloc[-1]
        quantity = round(size / price, 3)
        print(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ: quantity={quantity} (size={size}/price={price})")
        
        if quantity <= 0:
            print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: quantity={quantity}")
            print(f"   - –ë–∞–ª–∞–Ω—Å: {balance}")
            print(f"   - –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {size}")
            print(f"   - –¶–µ–Ω–∞: {price}")
            print(f"   - –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy.__class__.__name__}")
            print(f"   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy.config if hasattr(strategy, 'config') else 'N/A'}")
            raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞. –ë–∞–ª–∞–Ω—Å: {balance}, –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {size}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        
        return quantity, price

    async def _place_order(self, api_key, api_secret, template, signal, quantity, symbol_override: str | None = None):
        order_side = "BUY" if signal == "long" else "SELL"
        symbol_val = symbol_override or template.symbol.value
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: symbol={symbol_val}, side={order_side}, quantity={quantity}, leverage={template.leverage}")
        result = await self.order_service.create_order(
            api_key, api_secret,
            symbol=symbol_val,
            side=order_side,
            quantity=quantity,
            leverage=int(template.leverage),
            order_type="MARKET"
        )
        print(f"–°–æ–∑–¥–∞–Ω –æ—Ä–¥–µ—Ä: {result}")
        return result

    async def _fetch_entry_price(self, api_key, api_secret, symbol, order_id):
        print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ entry_price –ø–æ –æ—Ä–¥–µ—Ä—É: symbol={symbol}, orderId={order_id}")
        client = await self.exchange_client_factory.create(
            api_key,
            api_secret,
            exchange="binance"
        )
        max_retries = 5
        entry_price = 0.0
        for i in range(max_retries):
            order_info = await client.futures_get_order(
                symbol=symbol,
                orderId=order_id
            )
            print(f"–ò–Ω—Ñ–æ –ø–æ –æ—Ä–¥–µ—Ä—É ({i+1}): {order_info}")
            avg_price = float(order_info.get("avgPrice") or 0.0)
            executed_qty = float(order_info.get("executedQty") or 0.0)
            cum_quote = float(order_info.get("cumQuote") or 0.0)
            entry_price = avg_price if avg_price > 0 else (
                cum_quote / executed_qty if executed_qty > 0 else 0.0
            )
            if entry_price > 0:
                print(f"Entry price –ø–æ–ª—É—á–µ–Ω: {entry_price}")
                break
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞... –ü–æ–ø—ã—Ç–∫–∞ {i+1}")
            await asyncio.sleep(1)
        if entry_price == 0.0:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entry_price –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫")
        return entry_price

    async def _record_deal(
        self,
        user_id,
        bot_id,
        template,
        entry_price,
        order_result,
        signal,
        strategy_config,
        size,
        session,
        symbol_override: str | None = None,
        strategy=None
    ):
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        side = "BUY" if signal == "long" else "SELL"
        symbol_val = symbol_override or getattr(template.symbol, "value", str(template.symbol))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if strategy and hasattr(strategy, 'calculate_stop_loss_price'):
            stop_loss_price = strategy.calculate_stop_loss_price(entry_price, side)
            print(f"–°—Ç–æ–ø-–ª–æ—Å—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: {stop_loss_price:.4f}")
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            TRAIL_PCT = 0.002
            stop_loss_price = entry_price * (1 - TRAIL_PCT) if side == "BUY" else entry_price * (1 + TRAIL_PCT)
            print(f"–°—Ç–æ–ø-–ª–æ—Å—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {stop_loss_price:.4f}")

        deal_data = DealCreate(
            user_id=user_id,
            bot_id=bot_id,
            template_id=template.id,
            order_id=str(order_result["orderId"]),
            symbol=symbol_val,
            side="BUY" if signal == "long" else "SELL",
            entry_price=entry_price,
            size=size,
            status="open",
            stop_loss=float(stop_loss_price)
        )
        print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏: {deal_data}")
        deal = await self.deal_service.create(
            deal_data,
            session,
            autocommit=False
        )
        print(f"–°–¥–µ–ª–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –±–∞–∑–µ, id={deal.id}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ø –ª–æ—Å—Å –æ—Ä–¥–µ—Ä –Ω–∞ Binance
        try:
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            keys = await self.apikeys_service.get_decrypted_by_user(user_id)
            keys = keys[0] if keys else None
            if keys:
                client = await self.exchange_client_factory.create(
                    keys.api_key_encrypted, keys.api_secret_encrypted, exchange="binance"
                )
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ø –ª–æ—Å—Å –æ—Ä–¥–µ—Ä
                    stop_loss_order_id = await self.deal_service.create_stop_loss_order(
                        deal, session, client, stop_loss_price
                    )
                    print(f"–°—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –Ω–∞ Binance: {stop_loss_order_id}")
                finally:
                    await self.exchange_client_factory.close(client)
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
        
        await self.log_service.add_log(
            StrategyLogCreate(
                user_id=user_id,
                deal_id=deal.id,
                strategy=strategy_config.name,
                signal=signal,
                comment=f"–°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ Binance, –æ—Ä–¥–µ—Ä: {order_result.get('orderId')}"
            ),
            session=session,
            autocommit=False
        )
        print(f"–õ–æ–≥ –ø–æ —Å–¥–µ–ª–∫–µ {deal.id} –¥–æ–±–∞–≤–ª–µ–Ω")

    async def start_trading(self, user_id, session=None):
        print("=== –í—ã–∑–æ–≤ start_trading ===")
        await self.run_trading_cycle(
            user_id,
            session=session,
            )

    async def stop_trading(self, user_id: UUID, session):
        bot = await self.userbot_service.get_active_bot(user_id, "BTCUSDT")
        print(bot.status)
        await self.userbot_service.stop_bot(bot.id, session)

    async def get_bot_status(self, user_id: UUID) -> str:
        return "stopped"

    async def get_logs(self, deal_id: int):
        return await self.log_service.get_logs_by_deal(deal_id)

    async def _execute_intent_from_decision(self, user_id, bot_id, template, intent, md, api_key, api_secret, session, strategy=None):
        symbol_str = intent.symbol
        df_symbol = md.get(symbol_str)
        if df_symbol is None or df_symbol.empty:
            # –ø–æ–¥–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ—Ä–Ω—É–ª–∞ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª (–Ω–∞ –±—É–¥—É—â–µ–µ)
            kl = await self.marketdata_service.get_klines(
                api_key, api_secret,
                symbol=symbol_str,
                interval=template.interval.value,
                limit=500
            )
            df_symbol = pd.DataFrame(kl, columns=[
                'open_time','open','high','low','close','volume','close_time',
                'quote_asset_volume','number_of_trades','taker_buy_base','taker_buy_quote','ignore'
            ])
            df_symbol['close'] = df_symbol['close'].astype(float)

        last_price = float(df_symbol['close'].iloc[-1])

        # sizing -> usd_size
        sizing = getattr(intent, "sizing", "usd")
        print(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ intent: sizing={sizing}, intent.size={intent.size}, intent.side={intent.side}")
        
        if sizing == "risk_pct":
            bal = await self.balance_service.get_futures_balance(api_key, api_secret, asset="USDT")
            usd_size = float(bal["available"]) * float(intent.size)   # intent.size –≤ –¥–æ–ª—è—Ö (0..1]
            print(f"üìä –†–∞—Å—á–µ—Ç risk_pct: balance={bal['available']}, intent.size={intent.size}, usd_size={usd_size}")
        elif sizing == "usd":
            usd_size = float(intent.size)
            print(f"üìä –†–∞—Å—á–µ—Ç usd: usd_size={usd_size}")
        elif sizing == "qty":
            # —Ä–µ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è; –æ—Å—Ç–∞–≤–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
            qty_direct = float(intent.size)
            usd_size = qty_direct * last_price
            print(f"üìä –†–∞—Å—á–µ—Ç qty: qty_direct={qty_direct}, last_price={last_price}, usd_size={usd_size}")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π sizing: {sizing}, –ø—Ä–æ–ø—É—Å–∫")
            return

        # qty (–æ—Å—Ç–∞–≤–ª—è—é —Ç–≤–æ—é —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É; –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ stepSize –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ)
        quantity = round(usd_size / last_price, 3)
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç: usd_size={usd_size}, last_price={last_price}, quantity={quantity}")
        
        # –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ quantity = 0, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ
        if quantity <= 0:
            print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: quantity={quantity}")
            print(f"   - usd_size: {usd_size}")
            print(f"   - last_price: {last_price}")
            print(f"   - intent.size: {intent.size}")
            print(f"   - sizing: {sizing}")
            raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞. usd_size: {usd_size}, quantity: {quantity}")
        order_side = intent.side  # BUY/SELL
        legacy_signal = 'long' if order_side == 'BUY' else 'short'  # —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã

        print("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (–ø–æ intent)")
        order_result = await self._place_order(
            api_key, api_secret,
            template=template,
            signal=legacy_signal,
            quantity=quantity,
            symbol_override=symbol_str  # <‚Äî —Å–º. –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –Ω–∏–∂–µ
        )

        print("–ü–æ–ª—É—á–µ–Ω–∏–µ entry price")
        entry_price = await self._fetch_entry_price(api_key, api_secret, symbol_str, order_result['orderId'])

        print("–ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏ –∏ –ª–æ–≥–æ–≤")
        strategy_config = await self.strategy_config_service.get_by_id(template.strategy_config_id)
        await self._record_deal(
            user_id=user_id,
            bot_id=bot_id,
            template=template,
            entry_price=entry_price,
            order_result=order_result,
            signal=legacy_signal,
            strategy_config=strategy_config,
            size=quantity,
            session=session,
            symbol_override=symbol_str,
            strategy=strategy
        )
