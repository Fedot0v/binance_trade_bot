import pandas as pd
import requests
import tempfile
import os
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from pathlib import Path


class CSVLoaderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSV –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç–∞"""
    
    def __init__(self):
        self.temp_files: List[str] = []
    
    def download_from_binance(
        self, 
        symbol: str, 
        start_date: str, 
        end_date: str, 
        interval: str = "1m"
    ) -> str:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance API
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π (1m, 5m, 15m, 1h, 4h, 1d)
            
        Returns:
            str: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É CSV —Ñ–∞–π–ª—É
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        start_dt = datetime.strptime(start_date, "%Y-%m-%d")
        end_dt = datetime.strptime(end_date, "%Y-%m-%d")
        
        if start_dt > end_dt:
            raise ValueError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")
        
        # Binance API –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        base_url = "https://api.binance.com/api/v3/klines"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False)
        temp_file.write("timestamp,open,high,low,close,volume\n")
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö: –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)
        start_ms = int(start_dt.timestamp() * 1000)
        end_ms_inclusive = int((end_dt + timedelta(days=1)).timestamp() * 1000) - 1

        cursor_ms = start_ms
        total_candles = 0
        
        print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} —Å {start_date} –ø–æ {end_date}")
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ 1000 —Å–≤–µ—á–µ–π
        day_candle_counter = 0
        current_day = datetime.fromtimestamp(cursor_ms / 1000.0).date()
        try:
            while cursor_ms <= end_ms_inclusive:
                params = {
                    'symbol': symbol.upper(),
                    'interval': interval,
                    'startTime': cursor_ms,
                    'endTime': end_ms_inclusive,
                    'limit': 1000,
                }
                response = requests.get(base_url, params=params, timeout=30)
                response.raise_for_status()
                data = response.json()
                if not isinstance(data, list):
                    raise ValueError(f"Unexpected response: {data}")

                if not data:
                    # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤—ã—Ö–æ–¥–∏–º
                    break

                for candle in data:
                    ts = int(candle[0])
                    open_price = float(candle[1])
                    high_price = float(candle[2])
                    low_price = float(candle[3])
                    close_price = float(candle[4])
                    volume = float(candle[5])

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                    if ts < start_ms or ts > end_ms_inclusive:
                        continue
                    temp_file.write(f"{ts},{open_price},{high_price},{low_price},{close_price},{volume}\n")
                    total_candles += 1
                    day = datetime.fromtimestamp(ts / 1000.0).date()
                    if day != current_day:
                        # –í—ã–≤–æ–¥–∏–º —Å—á–µ—Ç—á–∏–∫ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                        print(f"  ‚úÖ {current_day.isoformat()}: {day_candle_counter} —Å–≤–µ—á–µ–π")
                        current_day = day
                        day_candle_counter = 0
                    day_candle_counter += 1

                # –°–ª–µ–¥—É—é—â–∏–π –∫—É—Ä—Å–æ—Ä ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
                last_ts = int(data[-1][0])
                if last_ts == cursor_ms:
                    # –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
                    cursor_ms += 1
                else:
                    cursor_ms = last_ts + 1
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        temp_file.close()
        self.temp_files.append(temp_file.name)
        
        print(f"‚úÖ –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ {total_candles} —Å–≤–µ—á–µ–π –≤ —Ñ–∞–π–ª: {temp_file.name}")
        return temp_file.name

    def download_dual_from_binance(
        self,
        symbol1: str,
        symbol2: str,
        start_date: str,
        end_date: str,
        interval: str = "1m"
    ) -> tuple[str, str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º."""
        file1 = self.download_from_binance(symbol1, start_date, end_date, interval)
        file2 = self.download_from_binance(symbol2, start_date, end_date, interval)
        return file1, file2
    
    def load_csv_data(self, file_path: str) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç CSV –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
            
        Returns:
            pd.DataFrame: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            df = pd.read_csv(file_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp
            if 'timestamp' in df.columns:
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                df.set_index('timestamp', inplace=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_cols = ['open', 'high', 'low', 'close', 'volume']
            missing_cols = [col for col in required_cols if col not in df.columns]
            
            if missing_cols:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ float
            numeric_cols = ['open', 'high', 'low', 'close', 'volume']
            for col in numeric_cols:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            df = df.dropna()
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df = df.sort_index()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
            if df.empty:
                raise ValueError("CSV —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π —Å {df.index[0]} –ø–æ {df.index[-1]}")
            
            return df
            
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞: {e}")
    
    def validate_data_quality(self, df: pd.DataFrame) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç–∞
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        quality_report = {
            'total_candles': len(df),
            'date_range': {
                'start': df.index[0].strftime('%Y-%m-%d %H:%M:%S'),
                'end': df.index[-1].strftime('%Y-%m-%d %H:%M:%S')
            },
            'missing_values': df.isnull().sum().to_dict(),
            'duplicates': df.index.duplicated().sum(),
            'price_anomalies': 0,
            'volume_anomalies': 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –≤ —Ü–µ–Ω–∞—Ö
        for col in ['open', 'high', 'low', 'close']:
            if col in df.columns:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
                negative_prices = (df[col] <= 0).sum()
                quality_report['price_anomalies'] += negative_prices
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã (> 1M)
                extreme_prices = (df[col] > 1000000).sum()
                quality_report['price_anomalies'] += extreme_prices
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –æ–±—ä–µ–º–µ
        if 'volume' in df.columns:
            quality_report['volume_anomalies'] = (df['volume'] < 0).sum()
        
        return quality_report
    
    def cleanup_temp_files(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        for temp_file in self.temp_files:
            try:
                if os.path.exists(temp_file):
                    os.unlink(temp_file)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {temp_file}: {e}")
        
        self.temp_files.clear()

    def cleanup_temp_file(self, file_path: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        try:
            if file_path and os.path.exists(file_path):
                os.unlink(file_path)
                if file_path in self.temp_files:
                    self.temp_files.remove(file_path)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.cleanup_temp_files()
