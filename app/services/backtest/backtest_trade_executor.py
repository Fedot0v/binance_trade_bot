from __future__ import annotations

from typing import Dict, Any, Optional


class BacktestTradeExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞.

    - –ù–µ –¥–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –±–∏—Ä–∂—É
    - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏, —Å–ø—Ä–µ–¥ –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –∏ —Ä–µ–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ –±—ç–∫—Ç–µ—Å—Ç–∞
    """

    def __init__(self, fee_rate: float = 0.0004, slippage_bps: float = 0.0, spread_bps: float = 0.0) -> None:
        # fee_rate: –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É (taker), –¥–æ–ª—è –æ—Ç notional
        # slippage_bps: –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ –±.–ø. (1 bps = 0.01%)
        # spread_bps: –ø–æ–ª–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –±.–ø.; –ø–æ–ª–æ–≤–∏–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É
        self.fee_rate = fee_rate
        self.slippage_bps = slippage_bps
        self.spread_bps = spread_bps

    def _apply_price_impacts(self, side: str, reference_price: float) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–ø—Ä–µ–¥–∞ –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è."""
        half_spread = 0.0  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
        slippage = 0.0     # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
        impact = half_spread + slippage
        if side == 'BUY':
            return reference_price * (1.0 + impact)
        return reference_price * (1.0 - impact)

    def can_open_position(self, intent, open_positions: Dict[str, Dict[str, Any]], balance: float) -> bool:
        # –û–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ —Å–∏–º–≤–æ–ª
        if intent.symbol in open_positions:
            print(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {intent.symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return False

        # –¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å
        if intent.sizing == "risk_pct":
            required_balance = balance * intent.size
        elif intent.sizing == "usd":
            required_balance = intent.size
        else:
            required_balance = balance * 0.01

        if required_balance > balance:
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω—É–∂–Ω–æ ${required_balance:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ ${balance:.2f}")
            return False

        if required_balance < 5:
            print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è: ${required_balance:.2f}")
            return False

        return True

    def execute(
        self,
        intent,
        current_price: float,
        current_time,
        balance: float,
        symbol: str
    ) -> Optional[Dict[str, Any]]:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ —Ä—ã–Ω–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç trade-—Å–ª–æ–≤–∞—Ä—å."""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
            effective_price = self._apply_price_impacts(intent.side, current_price)

            if intent.sizing == "risk_pct":
                size_usd = balance * intent.size
            elif intent.sizing == "usd":
                size_usd = intent.size
            else:
                size_usd = balance * 0.01

            if size_usd > balance:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏: –Ω—É–∂–Ω–æ ${size_usd:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ ${balance:.2f}")
                return None

            quantity = size_usd / effective_price
            open_fee = size_usd * self.fee_rate

            trade = {
                'timestamp': current_time,
                'symbol': symbol,
                'side': intent.side,
                'price': effective_price,
                'quantity': quantity,
                'size': quantity,
                'size_usd': size_usd,
                'balance_before': balance,
                'new_balance': balance - open_fee,
                'pnl': 0.0,
                'status': 'executed',
                'fee_open': open_fee,
            }

            print(f"üìä Backtest trade: {intent.side} {quantity:.6f} {symbol} @ ${effective_price:.2f}")
            return trade
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
            return None


