"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –±—ç–∫—Ç–µ—Å—Ç–æ–º
"""
from typing import Dict, Any, List, Union
import pandas as pd

from strategies.contracts import Strategy, Decision, OrderIntent
from strategies.strategy_factory import make_strategy


class LegacyStrategyAdapter(Strategy):
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –±—ç–∫—Ç–µ—Å—Ç–µ

    –≠—Ç–æ—Ç –∞–¥–∞–ø—Ç–µ—Ä –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã (NovichokAdapter, CompensationAdapter)
    –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Strategy, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç.
    """

    def __init__(self, strategy_name: str, template):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞

        Args:
            strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ('novichok' –∏–ª–∏ 'compensation')
            template: –®–∞–±–ª–æ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        self.strategy_name = strategy_name.lower()
        self.template = template

        # –°–æ–∑–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        self.legacy_strategy = make_strategy(strategy_name, template)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞
        self.id = f"legacy-{strategy_name}"

    def required_symbols(self, template=None) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if hasattr(self.legacy_strategy, 'required_symbols'):
            return self.legacy_strategy.required_symbols(self.template)
        else:
            # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–µ–∑ required_symbols
            if self.strategy_name == 'novichok':
                symbol = getattr(self.template, 'symbol', 'BTCUSDT')
                return [symbol] if isinstance(symbol, str) else [str(symbol)]
            elif self.strategy_name == 'compensation':
                return ['BTCUSDT', 'ETHUSDT']
            else:
                return ['BTCUSDT']

    async def decide(
        self,
        md: Dict[str, pd.DataFrame],
        template=None,
        open_state: Dict[str, Any] = None
    ) -> Decision:
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if hasattr(self.legacy_strategy, 'decide'):
                # –ù–æ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã (NovichokAdapter, CompensationAdapter)
                return await self.legacy_strategy.decide(md, self.template, open_state)
            else:
                # Fallback –¥–ª—è –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                return await self._fallback_decide(md, open_state)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ LegacyStrategyAdapter.decide: {e}")
            return Decision(intents=[])

    async def _fallback_decide(
        self,
        md: Dict[str, pd.DataFrame],
        open_state: Dict[str, Any]
    ) -> Decision:
        """
        Fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–µ–∑ decide –º–µ—Ç–æ–¥–∞
        """
        if self.strategy_name == 'novichok':
            return await self._novichok_fallback(md, open_state)
        elif self.strategy_name == 'compensation':
            return await self._compensation_fallback(md, open_state)
        else:
            return Decision(intents=[])

    async def _novichok_fallback(
        self,
        md: Dict[str, pd.DataFrame],
        open_state: Dict[str, Any]
    ) -> Decision:
        """Fallback –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        symbol = self.required_symbols()[0]
        df = md.get(symbol)

        if df is None or df.empty:
            return Decision(intents=[])

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        signal = self.legacy_strategy.generate_signal(df)

        if signal in (None, 'hold'):
            return Decision(intents=[])

        side = "BUY" if signal == "long" else "SELL"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if open_state and symbol in open_state:
            pos = open_state[symbol].get('position')
            if pos:
                pos_side = pos.get('side')
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
                if (pos_side == 'BUY' and side == 'SELL') or (pos_side == 'SELL' and side == 'BUY'):
                    close_intent = OrderIntent(
                        symbol=symbol,
                        side='SELL' if pos_side == 'BUY' else 'BUY',
                        sizing='close',
                        size=0,
                        role='close'
                    )
                    return Decision(intents=[close_intent])
            return Decision(intents=[])

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        risk_pct = float(getattr(self.template, 'deposit_prct', 0.1) or 0.1)

        intent = OrderIntent(
            symbol=symbol,
            side=side,
            sizing="risk_pct",
            size=risk_pct,
            role="primary"
        )

        return Decision(intents=[intent])

    async def _compensation_fallback(
        self,
        md: Dict[str, pd.DataFrame],
        open_state: Dict[str, Any]
    ) -> Decision:
        """Fallback –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CompensationAdapter –≤–º–µ—Å—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
        from strategies.compensation_adapter import CompensationAdapter

        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        if hasattr(self, '_compensation_adapter'):
            adapter = self._compensation_adapter
        else:
            # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (deal_service = None)
            adapter = CompensationAdapter(self.legacy_strategy, None)
            self._compensation_adapter = adapter

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        return await adapter.decide(md, self.template, open_state)

    def _should_compensate(self, btc_df: pd.DataFrame, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if len(btc_df) < 10:
            return False

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–Ω–∞ —É—à–ª–∞ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 0.5%
        entry_price = btc_df['close'].iloc[0]  # –£–ø—Ä–æ—â–µ–Ω–∏–µ
        price_change_pct = abs(current_price - entry_price) / entry_price

        return price_change_pct > 0.005


class LegacyBacktestService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LegacyStrategyAdapter –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –±—ç–∫—Ç–µ—Å—Ç–æ–º.
    """

    def __init__(self):
        from services.backtest.universal_backtest_service import UniversalBacktestService
        self.universal_service = UniversalBacktestService()

    async def run_novichok_backtest(
        self,
        template,
        data_source: str = 'file',
        csv_file_path: str = None,
        start_date: str = None,
        end_date: str = None,
        initial_balance: float = 10000.0,
        leverage: int = 1,
        config: Dict[str, Any] = None,
        symbols: Union[str, List[str]] = 'BTCUSDT' # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä symbols
    ):
        """
        –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –Ω–æ–≤–∏—á–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        print("üéØ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –Ω–æ–≤–∏—á–∫–∞ —á–µ—Ä–µ–∑ LegacyStrategyAdapter")

        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        strategy = LegacyStrategyAdapter('novichok', template)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π symbols, –∞ –Ω–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        # symbol = getattr(template, 'symbol', 'BTCUSDT')
        # if hasattr(symbol, 'value'):
        #     symbol = symbol.value

        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        return await self.universal_service.run_backtest(
            strategy=strategy,
            template=template,
            data_source=data_source,
            symbols=symbols, # –ü–µ—Ä–µ–¥–∞–µ–º symbols
            csv_files=csv_file_path,
            start_date=start_date,
            end_date=end_date,
            initial_balance=initial_balance,
            leverage=leverage,
            config=config
        )

    async def run_compensation_backtest(
        self,
        template,
        data_source: str = 'file',
        csv_btc_path: str = None,
        csv_eth_path: str = None,
        start_date: str = None,
        end_date: str = None,
        initial_balance: float = 10000.0,
        config: Dict[str, Any] = None,
        symbols: List[str] = None # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä symbols
    ):
        """
        –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        print("üéØ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LegacyStrategyAdapter")

        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        strategy = LegacyStrategyAdapter('compensation', template)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π symbols, –µ—Å–ª–∏ –µ—Å—Ç—å
        # symbols_for_compensation = symbols if symbols else ['BTCUSDT', 'ETHUSDT']
        if symbols is None:
            symbols = ['BTCUSDT', 'ETHUSDT']

        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        return await self.universal_service.run_compensation_backtest(
            strategy=strategy,
            template=template,
            symbols=symbols, # –ü–µ—Ä–µ–¥–∞–µ–º symbols –Ω–∞–ø—Ä—è–º—É—é
            data_source=data_source,
            csv_file1=csv_btc_path,
            csv_file2=csv_eth_path,
            start_date=start_date,
            end_date=end_date,
            initial_balance=initial_balance,
            config=config
        )
