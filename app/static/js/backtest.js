/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫—Ç–µ—Å—Ç–æ–º
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Ñ–æ—Ä–º–æ–π –±—ç–∫—Ç–µ—Å—Ç–∞
 */

class BacktestManager {
    constructor() {
        this.templatesData = [];
        this.form = null;
        this.loadingModal = null;
        this.templateSelect = null;
        this.templateParametersSection = null;
        this.templateParametersDisplay = null;
        this.progressBar = null;

        this.init();
    }

    init() {
        console.log('üöÄ BacktestManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        // –ü–æ–ª—É—á–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.form = document.getElementById('backtestForm');
        this.loadingModal = document.getElementById('loadingModal');
        this.templateSelect = document.getElementById('template_id');
        this.templateParametersSection = document.getElementById('template-parameters-section');
        this.templateParametersDisplay = document.getElementById('template-parameters-display');
        this.progressBar = document.querySelector('.progress-bar');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
        console.log('templateSelect:', this.templateSelect);
        console.log('templateParametersSection:', this.templateParametersSection);
        console.log('templateParametersDisplay:', this.templateParametersDisplay);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        this.restoreSavedParameters();
    }

    setupEventListeners() {
        if (this.templateSelect) {
            console.log('‚úÖ templateSelect –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
            this.templateSelect.addEventListener('change', (e) => {
                this.handleTemplateChange(e);
            });
        } else {
            console.error('‚ùå templateSelect –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        this.setupParameterEditHandlers();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        if (this.form) {
            this.form.addEventListener('submit', (e) => {
                this.handleFormSubmit(e);
            });
        }
    }

    handleTemplateChange(event) {
        console.log('üéØ –°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
        console.log('üìã –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', event.target.value);

        const selectedValue = event.target.value;
        if (selectedValue) {
            console.log('‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω —Å ID:', selectedValue);

            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è
            document.querySelectorAll('.template-desc').forEach(desc => {
                desc.style.display = 'none';
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            const desc = document.getElementById('desc-' + selectedValue);
            if (desc) {
                desc.style.display = 'block';
                console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞');
            } else {
                console.log('‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞
            console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞');
            this.loadTemplateParameters(selectedValue);
        } else {
            console.log('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω, —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
            if (this.templateParametersSection) {
                this.templateParametersSection.style.display = 'none';
            }
        }
    }

    async loadTemplateParameters(templateId) {
        try {
            console.log('üöÄ loadTemplateParameters –≤—ã–∑–≤–∞–Ω–∞ —Å ID:', templateId);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
            const templateData = this.templatesData.find(template => template.id == templateId);
            console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:', templateData);

            if (templateData && templateData.parameters) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞:', templateData.parameters);
                this.displayTemplateParameters(templateData.parameters);
                if (this.templateParametersSection) {
                    this.templateParametersSection.style.display = 'block';
                }
            } else {
                console.log('‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã–µ');
                if (this.templateParametersSection) {
                    this.templateParametersSection.style.display = 'none';
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞:', error);
            if (this.templateParametersSection) {
                this.templateParametersSection.style.display = 'none';
            }
        }
    }

    displayTemplateParameters(parameters) {
        console.log('üé® displayTemplateParameters –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', parameters);

        if (!this.templateParametersDisplay) {
            console.error('‚ùå templateParametersDisplay –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        console.log('‚úÖ templateParametersDisplay –Ω–∞–π–¥–µ–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');

        let html = '<div class="row">';

        Object.entries(parameters).forEach(([key, value]) => {
            const displayValue = this.isPercentageParameter(key) ?
                `${(parseFloat(value) * 100).toFixed(2)}%` : value;

            html += `
                <div class="col-md-6 mb-2">
                    <div class="parameter-item">
                        <strong class="parameter-label">${this.formatParameterName(key)}:</strong>
                        <span class="badge badge-secondary parameter-value">${displayValue}</span>
                    </div>
                </div>
            `;
        });

        html += '</div>';
        this.templateParametersDisplay.innerHTML = html;
    }

    isPercentageParameter(key) {
        const percentageParams = ['deposit_prct', 'stop_loss_pct', 'take_profit_pct',
                                'btc_deposit_prct', 'eth_deposit_prct', 'btc_stop_loss_pct', 'eth_stop_loss_pct', 'trailing_stop_pct'];
        return percentageParams.includes(key);
    }

    formatPercentageDisplay(value) {
        if (!value || value === '') {
            return '(0.0%)';
        }

        try {
            const numValue = parseFloat(value);
            if (!isNaN(numValue)) {
                const percentage = (numValue * 100).toFixed(2);
                return `(${percentage}%)`;
            } else {
                return `(${value})`;
            }
        } catch (error) {
            return `(${value})`;
        }
    }

    setupPercentageListeners() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const percentageInputs = document.querySelectorAll('input[data-percentage-param="true"]');

        percentageInputs.forEach(input => {
            const displaySpan = document.getElementById(`percentage-display-${input.name.replace('param_', '')}`);

            if (displaySpan) {
                const updatePercentageDisplay = () => {
                    const value = input.value.trim();
                    displaySpan.textContent = this.formatPercentageDisplay(value);
                };

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è
                input.addEventListener('input', updatePercentageDisplay);
                input.addEventListener('change', updatePercentageDisplay);
                input.addEventListener('blur', updatePercentageDisplay);

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                updatePercentageDisplay();
            }
        });

        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤');
    }

    formatParameterName(key) {
        const nameMap = {
            'ema_fast': '–ë—ã—Å—Ç—Ä–∞—è EMA',
            'ema_slow': '–ú–µ–¥–ª–µ–Ω–Ω–∞—è EMA',
            'trend_threshold': '–ü–æ—Ä–æ–≥ —Ç—Ä–µ–Ω–¥–∞',
            'deposit_prct': '–î–µ–ø–æ–∑–∏—Ç (%)',
            'stop_loss_pct': '–°—Ç–æ–ø-–ª–æ—Å—Å (%)',
            'take_profit_pct': '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%)',
            'trailing_stop_pct': '–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø (%)',
            'btc_deposit_prct': 'BTC –î–µ–ø–æ–∑–∏—Ç (%)',
            'eth_deposit_prct': 'ETH –î–µ–ø–æ–∑–∏—Ç (%)',
            'btc_stop_loss_pct': 'BTC –°—Ç–æ–ø-–ª–æ—Å—Å (%)',
            'eth_stop_loss_pct': 'ETH –°—Ç–æ–ø-–ª–æ—Å—Å (%)'
        };
        return nameMap[key] || key;
    }

    setupParameterEditHandlers() {
        const editBtn = document.getElementById('edit-parameters-btn');
        const saveBtn = document.getElementById('save-parameters-btn');
        const cancelBtn = document.getElementById('cancel-edit-btn');

        if (editBtn) {
            editBtn.addEventListener('click', () => {
                this.startParameterEditing();
            });
        }

        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                this.saveParameterChanges();
            });
        }

        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => {
                this.cancelParameterEditing();
            });
        }
    }

    startParameterEditing() {
        const selectedTemplateId = this.templateSelect ? this.templateSelect.value : null;
        if (!selectedTemplateId) return;

        const currentParameters = this.getTemplateParametersFromData(selectedTemplateId);
        this.createParameterEditForm(currentParameters);

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
        const displayDiv = document.getElementById('template-parameters-display');
        const editDiv = document.getElementById('template-parameters-edit');
        const editBtn = document.getElementById('edit-parameters-btn');

        if (displayDiv) displayDiv.style.display = 'none';
        if (editDiv) editDiv.style.display = 'block';
        if (editBtn) editBtn.style.display = 'none';
    }

    createParameterEditForm(parameters) {
        const formDiv = document.getElementById('parameters-form');
        if (!formDiv) return;

        let html = '<div class="row">';

        Object.entries(parameters).forEach(([key, value]) => {
            let inputType = 'text';
            let step = 'any';

            if (key.includes('ema')) {
                inputType = 'number';
                step = '1';
            }

            const displayValue = value;
            const isPercentage = this.isPercentageParameter(key);

            html += `
                <div class="col-md-6 mb-3">
                    <label for="param_${key}" class="form-label">${this.formatParameterName(key)}</label>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <input type="${inputType}" class="form-control form-control-sm" id="param_${key}"
                               name="param_${key}" value="${displayValue}" step="${step}"
                               ${isPercentage ? 'data-percentage-param="true"' : ''}>
                        ${isPercentage ? `
                            <span style="color: #F0B90B; font-weight: bold; white-space: nowrap; min-width: 60px;"
                                  data-percentage-display id="percentage-display-${key}">
                                ${this.formatPercentageDisplay(displayValue)}
                            </span>
                        ` : ''}
                    </div>
                    ${isPercentage ? '<small class="form-text text-muted">–í –¥—Ä–æ–±—è—Ö (–≤–∏–¥–Ω–æ –≤ % —Å–ø—Ä–∞–≤–∞)</small>' : ''}
                </div>
            `;
        });

        html += '</div>';
        formDiv.innerHTML = html;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        this.setupPercentageListeners();
    }

    saveParameterChanges() {
        const selectedTemplateId = this.templateSelect ? this.templateSelect.value : null;
        if (!selectedTemplateId) return;

        // –°–æ–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const inputs = document.querySelectorAll('#parameters-form input');
        const newParameters = {};

        inputs.forEach(input => {
            const paramName = input.name.replace('param_', '');
            newParameters[paramName] = input.value;
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        localStorage.setItem(`template_params_${selectedTemplateId}`, JSON.stringify(newParameters));

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º—É
        this.updateFormWithParameters(newParameters);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.displayTemplateParameters(newParameters);

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
        this.cancelParameterEditing();

        console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', newParameters);
    }

    cancelParameterEditing() {
        const displayDiv = document.getElementById('template-parameters-display');
        const editDiv = document.getElementById('template-parameters-edit');
        const editBtn = document.getElementById('edit-parameters-btn');

        if (displayDiv) displayDiv.style.display = 'block';
        if (editDiv) editDiv.style.display = 'none';
        if (editBtn) editBtn.style.display = 'inline-block';
    }

    updateFormWithParameters(parameters) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const oldParamFields = document.querySelectorAll('input[name^="custom_param_"]');
        oldParamFields.forEach(field => field.remove());

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        Object.entries(parameters).forEach(([key, value]) => {
            const hiddenField = document.createElement('input');
            hiddenField.type = 'hidden';
            hiddenField.name = `custom_param_${key}`;
            hiddenField.value = value;
            if (this.form) {
                this.form.appendChild(hiddenField);
            }
        });

        console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', parameters);
    }

    getTemplateParametersFromData(templateId) {
        console.log('üîç –ò—â–µ–º —à–∞–±–ª–æ–Ω —Å ID:', templateId, '—Å—Ä–µ–¥–∏', this.templatesData.length, '—à–∞–±–ª–æ–Ω–æ–≤');

        const templateData = this.templatesData.find(template => template.id == templateId);
        console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:', templateData);

        if (templateData && templateData.parameters) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞:', templateData.parameters);
            return templateData.parameters;
        }

        console.log('‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ');
        return {};
    }

    restoreSavedParameters() {
        const selectedTemplateId = this.templateSelect ? this.templateSelect.value : null;
        if (!selectedTemplateId) return;

        const savedParams = localStorage.getItem(`template_params_${selectedTemplateId}`);
        if (savedParams) {
            try {
                const parameters = JSON.parse(savedParams);
                this.displayTemplateParameters(parameters);
                if (this.templateParametersSection) {
                    this.templateParametersSection.style.display = 'block';
                }
                this.updateFormWithParameters(parameters);
                console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', parameters);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', error);
            }
        }
    }

    handleFormSubmit(event) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –±—ç–∫—Ç–µ—Å—Ç–∞');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏
        if (this.loadingModal) {
            try {
                const modal = new bootstrap.Modal(this.loadingModal, {
                    backdrop: 'static',
                    keyboard: false
                });
                modal.show();
                console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–æ');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
            }
        } else {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ)
    testParameters() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–∞');

        if (!this.templatesData || this.templatesData.length === 0) {
            alert('‚ùå –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
            return;
        }

        alert(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.templatesData.length} —à–∞–±–ª–æ–Ω–æ–≤\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω
        if (this.templatesData.length > 0) {
            const firstTemplate = this.templatesData[0];
            console.log('üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω:', firstTemplate);

            // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
            if (this.templateSelect) {
                this.templateSelect.value = firstTemplate.id;
                this.templateSelect.dispatchEvent(new Event('change'));
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —à–∞–±–ª–æ–Ω–∞)
    setTemplatesData(data) {
        this.templatesData = data;
        console.log('üìä –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', data);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.BacktestManager = BacktestManager;
window.backtestManager = new BacktestManager();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ)
window.testTemplateParameters = function() {
    if (window.backtestManager) {
        window.backtestManager.testParameters();
    } else {
        console.error('BacktestManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};
